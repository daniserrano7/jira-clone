{"version":3,"mappings":"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","names":["_extends","target","i","source","key","invariant","value","message","loadRouteModule","route","routeModulesCache","routeModule","__vitePreload","isHtmlLinkDescriptor","object","getStylesheetPrefetchLinks","matches","manifest","routeModules","match","mod","link","getNewMatchesForLinks","page","nextMatches","currentMatches","location","mode","path","parsePathPatch","isNew","index","matchPathChanged","_currentMatches$index","_currentMatches$","routeChoice","manifestRoute","getDataLinkHrefs","dedupeHrefs","pathname","search","searchParams","getModuleLinkHrefs","manifestPatch","hrefs","href","parsePath","useDataRouterContext","context","React.useContext","UNSAFE_DataRouterContext","useDataRouterStateContext","UNSAFE_DataRouterStateContext","RemixContext","React.createContext","useRemixContext","usePrefetchBehavior","prefetch","theirElementProps","maybePrefetch","setMaybePrefetch","React.useState","shouldPrefetch","setShouldPrefetch","onFocus","onBlur","onMouseEnter","onMouseLeave","onTouchStart","ref","React.useRef","React.useEffect","callback","entries","entry","observer","setIntent","cancelIntent","id","composeEventHandlers","ABSOLUTE_URL_REGEX","NavLink","React.forwardRef","to","props","forwardedRef","isAbsolute","useHref","prefetchHandlers","React.createElement","React.Fragment","NavLink$1","mergeRefs","PrefetchPageLinks","Link","Link$1","theirHandler","ourHandler","event","dataLinkProps","router","React.useMemo","matchRoutes","PrefetchPageLinksImpl","usePrefetchedStylesheets","styleLinks","setStyleLinks","interrupted","links","linkProps","useLocation","newMatchesForData","newMatchesForAssets","dataHrefs","moduleHrefs","refs","patchRoutesWithContext","routes","loader","args","action","createRemixStub","initialEntries","initialIndex","hydrationData","remixConfigFuture","routerRef","remixContextRef","patched","createMemoryRouter","createManifest","createRouteModules","UNSAFE_RemixContext","RouterProvider","createRouteManifest","parentId","convertToEntryRoute","modules"],"sources":["../../node_modules/.pnpm/@remix-run+react@1.19.2_react-dom@18.2.0_react@18.2.0/node_modules/@remix-run/react/dist/esm/_virtual/_rollupPluginBabelHelpers.js","../../node_modules/.pnpm/@remix-run+react@1.19.2_react-dom@18.2.0_react@18.2.0/node_modules/@remix-run/react/dist/esm/invariant.js","../../node_modules/.pnpm/@remix-run+react@1.19.2_react-dom@18.2.0_react@18.2.0/node_modules/@remix-run/react/dist/esm/routeModules.js","../../node_modules/.pnpm/@remix-run+react@1.19.2_react-dom@18.2.0_react@18.2.0/node_modules/@remix-run/react/dist/esm/links.js","../../node_modules/.pnpm/@remix-run+react@1.19.2_react-dom@18.2.0_react@18.2.0/node_modules/@remix-run/react/dist/esm/components.js","../../node_modules/.pnpm/@remix-run+testing@1.19.2_react-dom@18.2.0_react@18.2.0/node_modules/@remix-run/testing/dist/esm/create-remix-stub.js"],"sourcesContent":["/**\n * @remix-run/react v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n","/**\n * @remix-run/react v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport { invariant as default };\n","/**\n * @remix-run/react v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n/**\n * A React component that is rendered when the server throws a Response.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/catch-boundary\n */\n\n/**\n * A React component that is rendered when there is an error on a route.\n *\n * @deprecated Please enable the v2_errorBoundary flag\n *\n * @see https://remix.run/route/error-boundary\n */\n\n/**\n * V2 version of the ErrorBoundary that eliminates the distinction between\n * Error and Catch Boundaries and behaves like RR 6.4 errorElement and captures\n * errors with useRouteError()\n */\n\n/**\n * A function that defines `<link>` tags to be inserted into the `<head>` of\n * the document on route transitions.\n *\n * @see https://remix.run/route/meta\n */\n\n/**\n * A function that returns an object of name + content pairs to use for\n * `<meta>` tags for a route. These tags will be merged with (and take\n * precedence over) tags from parent routes.\n *\n * @see https://remix.run/route/meta\n */\n\n// TODO: Replace in v2\n\n/**\n * A name/content pair used to render `<meta>` tags in a meta function for a\n * route. The value can be either a string, which will render a single `<meta>`\n * tag, or an array of strings that will render multiple tags with the same\n * `name` attribute.\n */\n\n// TODO: Replace in v2\n\n/**\n * A React component that is rendered for a route.\n */\n\n/**\n * An arbitrary object that is associated with a route.\n *\n * @see https://remix.run/route/handle\n */\n\nasync function loadRouteModule(route, routeModulesCache) {\n  if (route.id in routeModulesCache) {\n    return routeModulesCache[route.id];\n  }\n  try {\n    let routeModule = await import( /* webpackIgnore: true */route.module);\n    routeModulesCache[route.id] = routeModule;\n    return routeModule;\n  } catch (error) {\n    // User got caught in the middle of a deploy and the CDN no longer has the\n    // asset we're trying to import! Reload from the server and the user\n    // (should) get the new manifest--unless the developer purged the static\n    // assets, the manifest path, but not the documents 😬\n    window.location.reload();\n    return new Promise(() => {\n      // check out of this hook cause the DJs never gonna re[s]olve this\n    });\n  }\n}\n\n/**\n * @deprecated The `unstable_shouldReload` function has been removed, so this\n * function will never run and route data will be revalidated on every request.\n * Please update the function name to `shouldRevalidate` and use the\n * `ShouldRevalidateFunction` interface.\n */\n\nexport { loadRouteModule };\n","/**\n * @remix-run/react v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { parsePath } from 'react-router-dom';\nimport { loadRouteModule } from './routeModules.js';\n\n/**\n * Represents a `<link>` element.\n *\n * WHATWG Specification: https://html.spec.whatwg.org/multipage/semantics.html#the-link-element\n */\n\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Gets all the links for a set of matches. The modules are assumed to have been\n * loaded already.\n */\nfunction getLinksForMatches(matches, routeModules, manifest) {\n  let descriptors = matches.map(match => {\n    var _module$links;\n    let module = routeModules[match.route.id];\n    return ((_module$links = module.links) === null || _module$links === void 0 ? void 0 : _module$links.call(module)) || [];\n  }).flat(1);\n  let preloads = getCurrentPageModulePreloadHrefs(matches, manifest);\n  return dedupe(descriptors, preloads);\n}\nasync function prefetchStyleLinks(routeModule) {\n  if (!routeModule.links) return;\n  let descriptors = routeModule.links();\n  if (!descriptors) return;\n  let styleLinks = [];\n  for (let descriptor of descriptors) {\n    if (!isPageLinkDescriptor(descriptor) && descriptor.rel === \"stylesheet\") {\n      styleLinks.push({\n        ...descriptor,\n        rel: \"preload\",\n        as: \"style\"\n      });\n    }\n  }\n\n  // don't block for non-matching media queries, or for stylesheets that are\n  // already in the DOM (active route revalidations)\n  let matchingLinks = styleLinks.filter(link => (!link.media || window.matchMedia(link.media).matches) && !document.querySelector(`link[rel=\"stylesheet\"][href=\"${link.href}\"]`));\n  await Promise.all(matchingLinks.map(prefetchStyleLink));\n}\nasync function prefetchStyleLink(descriptor) {\n  return new Promise(resolve => {\n    let link = document.createElement(\"link\");\n    Object.assign(link, descriptor);\n    function removeLink() {\n      // if a navigation interrupts this prefetch React will update the <head>\n      // and remove the link we put in there manually, so we check if it's still\n      // there before trying to remove it\n      if (document.head.contains(link)) {\n        document.head.removeChild(link);\n      }\n    }\n    link.onload = () => {\n      removeLink();\n      resolve();\n    };\n    link.onerror = () => {\n      removeLink();\n      resolve();\n    };\n    document.head.appendChild(link);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction isPageLinkDescriptor(object) {\n  return object != null && typeof object.page === \"string\";\n}\nfunction isHtmlLinkDescriptor(object) {\n  if (object == null) return false;\n\n  // <link> may not have an href if <link rel=\"preload\"> is used with imagesrcset + imagesizes\n  // https://github.com/remix-run/remix/issues/184\n  // https://html.spec.whatwg.org/commit-snapshots/cb4f5ff75de5f4cbd7013c4abad02f21c77d4d1c/#attr-link-imagesrcset\n  if (object.href == null) {\n    return object.rel === \"preload\" && (typeof object.imageSrcSet === \"string\" || typeof object.imagesrcset === \"string\") && (typeof object.imageSizes === \"string\" || typeof object.imagesizes === \"string\");\n  }\n  return typeof object.rel === \"string\" && typeof object.href === \"string\";\n}\nasync function getStylesheetPrefetchLinks(matches, manifest, routeModules) {\n  let links = await Promise.all(matches.map(async match => {\n    let mod = await loadRouteModule(manifest.routes[match.route.id], routeModules);\n    return mod.links ? mod.links() : [];\n  }));\n  return links.flat(1).filter(isHtmlLinkDescriptor).filter(link => link.rel === \"stylesheet\" || link.rel === \"preload\").map(link => link.rel === \"preload\" ? {\n    ...link,\n    rel: \"prefetch\"\n  } : {\n    ...link,\n    rel: \"prefetch\",\n    as: \"style\"\n  });\n}\n\n// This is ridiculously identical to transition.ts `filterMatchesToLoad`\nfunction getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location, mode) {\n  let path = parsePathPatch(page);\n  let isNew = (match, index) => {\n    if (!currentMatches[index]) return true;\n    return match.route.id !== currentMatches[index].route.id;\n  };\n  let matchPathChanged = (match, index) => {\n    var _currentMatches$index;\n    return (\n      // param change, /users/123 -> /users/456\n      currentMatches[index].pathname !== match.pathname ||\n      // splat param changed, which is not present in match.path\n      // e.g. /files/images/avatar.jpg -> files/finances.xls\n      ((_currentMatches$index = currentMatches[index].route.path) === null || _currentMatches$index === void 0 ? void 0 : _currentMatches$index.endsWith(\"*\")) && currentMatches[index].params[\"*\"] !== match.params[\"*\"]\n    );\n  };\n\n  // NOTE: keep this mostly up-to-date w/ the transition data diff, but this\n  // version doesn't care about submissions\n  let newMatches = mode === \"data\" && location.search !== path.search ?\n  // this is really similar to stuff in transition.ts, maybe somebody smarter\n  // than me (or in less of a hurry) can share some of it. You're the best.\n  nextMatches.filter((match, index) => {\n    let manifestRoute = manifest.routes[match.route.id];\n    if (!manifestRoute.hasLoader) {\n      return false;\n    }\n    if (isNew(match, index) || matchPathChanged(match, index)) {\n      return true;\n    }\n    if (match.route.shouldRevalidate) {\n      var _currentMatches$;\n      let routeChoice = match.route.shouldRevalidate({\n        currentUrl: new URL(location.pathname + location.search + location.hash, window.origin),\n        currentParams: ((_currentMatches$ = currentMatches[0]) === null || _currentMatches$ === void 0 ? void 0 : _currentMatches$.params) || {},\n        nextUrl: new URL(page, window.origin),\n        nextParams: match.params,\n        defaultShouldRevalidate: true\n      });\n      if (typeof routeChoice === \"boolean\") {\n        return routeChoice;\n      }\n    }\n    return true;\n  }) : nextMatches.filter((match, index) => {\n    let manifestRoute = manifest.routes[match.route.id];\n    return (mode === \"assets\" || manifestRoute.hasLoader) && (isNew(match, index) || matchPathChanged(match, index));\n  });\n  return newMatches;\n}\nfunction getDataLinkHrefs(page, matches, manifest) {\n  let path = parsePathPatch(page);\n  return dedupeHrefs(matches.filter(match => manifest.routes[match.route.id].hasLoader).map(match => {\n    let {\n      pathname,\n      search\n    } = path;\n    let searchParams = new URLSearchParams(search);\n    searchParams.set(\"_data\", match.route.id);\n    return `${pathname}?${searchParams}`;\n  }));\n}\nfunction getModuleLinkHrefs(matches, manifestPatch) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifestPatch.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\n\n// The `<Script>` will render rel=modulepreload for the current page, we don't\n// need to include them in a page prefetch, this gives us the list to remove\n// while deduping.\nfunction getCurrentPageModulePreloadHrefs(matches, manifest) {\n  return dedupeHrefs(matches.map(match => {\n    let route = manifest.routes[match.route.id];\n    let hrefs = [route.module];\n    if (route.imports) {\n      hrefs = hrefs.concat(route.imports);\n    }\n    return hrefs;\n  }).flat(1));\n}\nfunction dedupeHrefs(hrefs) {\n  return [...new Set(hrefs)];\n}\nfunction dedupe(descriptors, preloads) {\n  let set = new Set();\n  let preloadsSet = new Set(preloads);\n  return descriptors.reduce((deduped, descriptor) => {\n    let alreadyModulePreload = !isPageLinkDescriptor(descriptor) && descriptor.as === \"script\" && descriptor.href && preloadsSet.has(descriptor.href);\n    if (alreadyModulePreload) {\n      return deduped;\n    }\n    let str = JSON.stringify(descriptor);\n    if (!set.has(str)) {\n      set.add(str);\n      deduped.push(descriptor);\n    }\n    return deduped;\n  }, []);\n}\n\n// https://github.com/remix-run/history/issues/897\nfunction parsePathPatch(href) {\n  let path = parsePath(href);\n  if (path.search === undefined) path.search = \"\";\n  return path;\n}\n\nexport { dedupe, getDataLinkHrefs, getLinksForMatches, getModuleLinkHrefs, getNewMatchesForLinks, getStylesheetPrefetchLinks, isHtmlLinkDescriptor, isPageLinkDescriptor, prefetchStyleLinks };\n","/**\n * @remix-run/react v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.js';\nimport * as React from 'react';\nimport { useHref, NavLink as NavLink$1, Link as Link$1, matchRoutes, useLocation, Await as Await$1, useNavigation, useAsyncError, useMatches as useMatches$1, useLoaderData as useLoaderData$1, useRouteLoaderData as useRouteLoaderData$1, useActionData as useActionData$1, useFetchers as useFetchers$1, useFetcher as useFetcher$1, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, Outlet, useRouteError, isRouteErrorResponse } from 'react-router-dom';\nimport { RemixRootDefaultErrorBoundary, RemixCatchBoundary, V2_RemixRootDefaultErrorBoundary, RemixRootDefaultCatchBoundary } from './errorBoundaries.js';\nimport invariant from './invariant.js';\nimport { getLinksForMatches, isPageLinkDescriptor, getNewMatchesForLinks, getDataLinkHrefs, getModuleLinkHrefs, getStylesheetPrefetchLinks } from './links.js';\nimport { escapeHtml, createHtml } from './markup.js';\nimport { IDLE_TRANSITION, IDLE_FETCHER } from './transition.js';\nimport { logDeprecationOnce } from './warnings.js';\n\nfunction useDataRouterContext() {\n  let context = React.useContext(UNSAFE_DataRouterContext);\n  invariant(context, \"You must render this element inside a <DataRouterContext.Provider> element\");\n  return context;\n}\nfunction useDataRouterStateContext() {\n  let context = React.useContext(UNSAFE_DataRouterStateContext);\n  invariant(context, \"You must render this element inside a <DataRouterStateContext.Provider> element\");\n  return context;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixContext\n\nconst RemixContext = /*#__PURE__*/React.createContext(undefined);\nRemixContext.displayName = \"Remix\";\nfunction useRemixContext() {\n  let context = React.useContext(RemixContext);\n  invariant(context, \"You must render this element inside a <Remix> element\");\n  return context;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RemixRoute\n\nfunction RemixRoute({\n  id\n}) {\n  let {\n    routeModules,\n    future\n  } = useRemixContext();\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let {\n    default: Component,\n    ErrorBoundary,\n    CatchBoundary\n  } = routeModules[id];\n\n  // Default Component to Outlet if we expose boundary UI components\n  if (!Component && (ErrorBoundary || !future.v2_errorBoundary && CatchBoundary)) {\n    Component = Outlet;\n  }\n  invariant(Component, `Route \"${id}\" has no component! Please go add a \\`default\\` export in the route module file.\\n` + \"If you were trying to navigate or submit to a resource route, use `<a>` instead of `<Link>` or `<Form reloadDocument>`.\");\n  return /*#__PURE__*/React.createElement(Component, null);\n}\nfunction RemixRouteError({\n  id\n}) {\n  let {\n    future,\n    routeModules\n  } = useRemixContext();\n\n  // This checks prevent cryptic error messages such as: 'Cannot read properties of undefined (reading 'root')'\n  invariant(routeModules, \"Cannot initialize 'routeModules'. This normally occurs when you have server code in your client modules.\\n\" + \"Check this link for more details:\\nhttps://remix.run/pages/gotchas#server-code-in-client-bundles\");\n  let error = useRouteError();\n  let {\n    CatchBoundary,\n    ErrorBoundary\n  } = routeModules[id];\n  if (future.v2_errorBoundary) {\n    // Provide defaults for the root route if they are not present\n    if (id === \"root\") {\n      ErrorBoundary || (ErrorBoundary = V2_RemixRootDefaultErrorBoundary);\n    }\n    if (ErrorBoundary) {\n      // TODO: Unsure if we can satisfy the typings here\n      // @ts-expect-error\n      return /*#__PURE__*/React.createElement(ErrorBoundary, null);\n    }\n    throw error;\n  }\n\n  // Provide defaults for the root route if they are not present\n  if (id === \"root\") {\n    CatchBoundary || (CatchBoundary = RemixRootDefaultCatchBoundary);\n    ErrorBoundary || (ErrorBoundary = RemixRootDefaultErrorBoundary);\n  }\n  if (isRouteErrorResponse(error)) {\n    let tError = error;\n    if (!!(tError !== null && tError !== void 0 && tError.error) && tError.status !== 404 && ErrorBoundary) {\n      // Internal framework-thrown ErrorResponses\n      return /*#__PURE__*/React.createElement(ErrorBoundary, {\n        error: tError.error\n      });\n    }\n    if (CatchBoundary) {\n      // User-thrown ErrorResponses\n      return /*#__PURE__*/React.createElement(RemixCatchBoundary, {\n        catch: error,\n        component: CatchBoundary\n      });\n    }\n  }\n  if (error instanceof Error && ErrorBoundary) {\n    // User- or framework-thrown Errors\n    return /*#__PURE__*/React.createElement(ErrorBoundary, {\n      error: error\n    });\n  }\n  throw error;\n}\n////////////////////////////////////////////////////////////////////////////////\n// Public API\n\n/**\n * Defines the prefetching behavior of the link:\n *\n * - \"intent\": Fetched when the user focuses or hovers the link\n * - \"render\": Fetched when the link is rendered\n * - \"none\": Never fetched\n */\nfunction usePrefetchBehavior(prefetch, theirElementProps) {\n  let [maybePrefetch, setMaybePrefetch] = React.useState(false);\n  let [shouldPrefetch, setShouldPrefetch] = React.useState(false);\n  let {\n    onFocus,\n    onBlur,\n    onMouseEnter,\n    onMouseLeave,\n    onTouchStart\n  } = theirElementProps;\n  let ref = React.useRef(null);\n  React.useEffect(() => {\n    if (prefetch === \"render\") {\n      setShouldPrefetch(true);\n    }\n    if (prefetch === \"viewport\") {\n      let callback = entries => {\n        entries.forEach(entry => {\n          setShouldPrefetch(entry.isIntersecting);\n        });\n      };\n      let observer = new IntersectionObserver(callback, {\n        threshold: 0.5\n      });\n      if (ref.current) observer.observe(ref.current);\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [prefetch]);\n  let setIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(true);\n    }\n  };\n  let cancelIntent = () => {\n    if (prefetch === \"intent\") {\n      setMaybePrefetch(false);\n      setShouldPrefetch(false);\n    }\n  };\n  React.useEffect(() => {\n    if (maybePrefetch) {\n      let id = setTimeout(() => {\n        setShouldPrefetch(true);\n      }, 100);\n      return () => {\n        clearTimeout(id);\n      };\n    }\n  }, [maybePrefetch]);\n  return [shouldPrefetch, ref, {\n    onFocus: composeEventHandlers(onFocus, setIntent),\n    onBlur: composeEventHandlers(onBlur, cancelIntent),\n    onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),\n    onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),\n    onTouchStart: composeEventHandlers(onTouchStart, setIntent)\n  }];\n}\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * A special kind of `<Link>` that knows whether or not it is \"active\".\n *\n * @see https://remix.run/components/nav-link\n */\nlet NavLink = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to);\n  let href = useHref(to);\n  let [shouldPrefetch, ref, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NavLink$1, _extends({}, props, prefetchHandlers, {\n    ref: mergeRefs(forwardedRef, ref),\n    to: to\n  })), shouldPrefetch && !isAbsolute ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nNavLink.displayName = \"NavLink\";\n\n/**\n * This component renders an anchor tag and is the primary way the user will\n * navigate around your website.\n *\n * @see https://remix.run/components/link\n */\nlet Link = /*#__PURE__*/React.forwardRef(({\n  to,\n  prefetch = \"none\",\n  ...props\n}, forwardedRef) => {\n  let isAbsolute = typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to);\n  let href = useHref(to);\n  let [shouldPrefetch, ref, prefetchHandlers] = usePrefetchBehavior(prefetch, props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Link$1, _extends({}, props, prefetchHandlers, {\n    ref: mergeRefs(forwardedRef, ref),\n    to: to\n  })), shouldPrefetch && !isAbsolute ? /*#__PURE__*/React.createElement(PrefetchPageLinks, {\n    page: href\n  }) : null);\n});\nLink.displayName = \"Link\";\nfunction composeEventHandlers(theirHandler, ourHandler) {\n  return event => {\n    theirHandler && theirHandler(event);\n    if (!event.defaultPrevented) {\n      ourHandler(event);\n    }\n  };\n}\nlet linksWarning = \"⚠️ REMIX FUTURE CHANGE: The behavior of links `imagesizes` and `imagesrcset` will be changing in v2. \" + \"Only the React camel case versions will be valid. Please change to `imageSizes` and `imageSrcSet`. \" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#links-imagesizes-and-imagesrcset\";\nlet useTransitionWarning = \"⚠️ REMIX FUTURE CHANGE: `useTransition` will be removed in v2 in favor of `useNavigation`. \" + \"You can prepare for this change at your convenience by updating to `useNavigation`. \" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usetransition\";\nlet fetcherTypeWarning = \"⚠️ REMIX FUTURE CHANGE: `fetcher.type` will be removed in v2. \" + \"Please use `fetcher.state`, `fetcher.formData`, and `fetcher.data` to achieve the same UX. \" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher\";\nlet fetcherSubmissionWarning = \"⚠️ REMIX FUTURE CHANGE : `fetcher.submission` will be removed in v2. \" + \"The submission fields are now part of the fetcher object itself (`fetcher.formData`). \" + \"For instructions on making this change see \" + \"https://remix.run/docs/en/v1.15.0/pages/v2#usefetcher\";\n\n/**\n * Renders the `<link>` tags for the current routes.\n *\n * @see https://remix.run/components/links\n */\nfunction Links() {\n  let {\n    manifest,\n    routeModules\n  } = useRemixContext();\n  let {\n    errors,\n    matches: routerMatches\n  } = useDataRouterStateContext();\n  let matches = errors ? routerMatches.slice(0, routerMatches.findIndex(m => errors[m.route.id]) + 1) : routerMatches;\n  let links = React.useMemo(() => getLinksForMatches(matches, routeModules, manifest), [matches, routeModules, manifest]);\n  React.useEffect(() => {\n    if (links.some(link => \"imagesizes\" in link || \"imagesrcset\" in link)) {\n      logDeprecationOnce(linksWarning);\n    }\n  }, [links]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, links.map(link => {\n    if (isPageLinkDescriptor(link)) {\n      return /*#__PURE__*/React.createElement(PrefetchPageLinks, _extends({\n        key: link.page\n      }, link));\n    }\n    let imageSrcSet = null;\n\n    // In React 17, <link imageSrcSet> and <link imageSizes> will warn\n    // because the DOM attributes aren't recognized, so users need to pass\n    // them in all lowercase to forward the attributes to the node without a\n    // warning. Normalize so that either property can be used in Remix.\n    if (\"useId\" in React) {\n      if (link.imagesrcset) {\n        link.imageSrcSet = imageSrcSet = link.imagesrcset;\n        delete link.imagesrcset;\n      }\n      if (link.imagesizes) {\n        link.imageSizes = link.imagesizes;\n        delete link.imagesizes;\n      }\n    } else {\n      if (link.imageSrcSet) {\n        link.imagesrcset = imageSrcSet = link.imageSrcSet;\n        delete link.imageSrcSet;\n      }\n      if (link.imageSizes) {\n        link.imagesizes = link.imageSizes;\n        delete link.imageSizes;\n      }\n    }\n    return /*#__PURE__*/React.createElement(\"link\", _extends({\n      key: link.rel + (link.href || \"\") + (imageSrcSet || \"\")\n    }, link));\n  }));\n}\n\n/**\n * This component renders all of the `<link rel=\"prefetch\">` and\n * `<link rel=\"modulepreload\"/>` tags for all the assets (data, modules, css) of\n * a given page.\n *\n * @param props\n * @param props.page\n * @see https://remix.run/components/prefetch-page-links\n */\nfunction PrefetchPageLinks({\n  page,\n  ...dataLinkProps\n}) {\n  let {\n    router\n  } = useDataRouterContext();\n  let matches = React.useMemo(() => matchRoutes(router.routes, page), [router.routes, page]);\n  if (!matches) {\n    console.warn(`Tried to prefetch ${page} but no routes matched.`);\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(PrefetchPageLinksImpl, _extends({\n    page: page,\n    matches: matches\n  }, dataLinkProps));\n}\nfunction usePrefetchedStylesheets(matches) {\n  let {\n    manifest,\n    routeModules\n  } = useRemixContext();\n  let [styleLinks, setStyleLinks] = React.useState([]);\n  React.useEffect(() => {\n    let interrupted = false;\n    getStylesheetPrefetchLinks(matches, manifest, routeModules).then(links => {\n      if (!interrupted) setStyleLinks(links);\n    });\n    return () => {\n      interrupted = true;\n    };\n  }, [matches, manifest, routeModules]);\n  return styleLinks;\n}\nfunction PrefetchPageLinksImpl({\n  page,\n  matches: nextMatches,\n  ...linkProps\n}) {\n  let location = useLocation();\n  let {\n    manifest\n  } = useRemixContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let newMatchesForData = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, \"data\"), [page, nextMatches, matches, manifest, location]);\n  let newMatchesForAssets = React.useMemo(() => getNewMatchesForLinks(page, nextMatches, matches, manifest, location, \"assets\"), [page, nextMatches, matches, manifest, location]);\n  let dataHrefs = React.useMemo(() => getDataLinkHrefs(page, newMatchesForData, manifest), [newMatchesForData, page, manifest]);\n  let moduleHrefs = React.useMemo(() => getModuleLinkHrefs(newMatchesForAssets, manifest), [newMatchesForAssets, manifest]);\n\n  // needs to be a hook with async behavior because we need the modules, not\n  // just the manifest like the other links in here.\n  let styleLinks = usePrefetchedStylesheets(newMatchesForAssets);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, dataHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"prefetch\",\n    as: \"fetch\",\n    href: href\n  }, linkProps))), moduleHrefs.map(href => /*#__PURE__*/React.createElement(\"link\", _extends({\n    key: href,\n    rel: \"modulepreload\",\n    href: href\n  }, linkProps))), styleLinks.map(link =>\n  /*#__PURE__*/\n  // these don't spread `linkProps` because they are full link descriptors\n  // already with their own props\n  React.createElement(\"link\", _extends({\n    key: link.href\n  }, link))));\n}\n\n/**\n * Renders the `<title>` and `<meta>` tags for the current routes.\n *\n * @see https://remix.run/components/meta\n */\nfunction V1Meta() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let {\n    errors,\n    matches: routerMatches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let matches = errors ? routerMatches.slice(0, routerMatches.findIndex(m => errors[m.route.id]) + 1) : routerMatches;\n  let meta = {};\n  let parentsData = {};\n  for (let match of matches) {\n    let routeId = match.route.id;\n    let data = loaderData[routeId];\n    let params = match.params;\n    let routeModule = routeModules[routeId];\n    if (routeModule.meta) {\n      let routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        parentsData,\n        params,\n        location\n      }) : routeModule.meta;\n      if (routeMeta && Array.isArray(routeMeta)) {\n        throw new Error(\"The route at \" + match.route.path + \" returns an array. This is only supported with the `v2_meta` future flag \" + \"in the Remix config. Either set the flag to `true` or update the route's \" + \"meta function to return an object.\" + \"\\n\\nTo reference the v1 meta function API, see https://remix.run/route/meta\"\n        // TODO: Add link to the docs once they are written\n        // + \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta.\"\n        );\n      }\n\n      Object.assign(meta, routeMeta);\n    }\n    parentsData[routeId] = data;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.entries(meta).map(([name, value]) => {\n    if (!value) {\n      return null;\n    }\n    if ([\"charset\", \"charSet\"].includes(name)) {\n      return /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charSet\",\n        charSet: value\n      });\n    }\n    if (name === \"title\") {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(value));\n    }\n\n    // Open Graph tags use the `property` attribute, while other meta tags\n    // use `name`. See https://ogp.me/\n    //\n    // Namespaced attributes:\n    //  - https://ogp.me/#type_music\n    //  - https://ogp.me/#type_video\n    //  - https://ogp.me/#type_article\n    //  - https://ogp.me/#type_book\n    //  - https://ogp.me/#type_profile\n    //\n    // Facebook specific tags begin with `fb:` and also use the `property`\n    // attribute.\n    //\n    // Twitter specific tags begin with `twitter:` but they use `name`, so\n    // they are excluded.\n    let isOpenGraphTag = /^(og|music|video|article|book|profile|fb):.+$/.test(name);\n    return [value].flat().map(content => {\n      if (isOpenGraphTag) {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          property: name,\n          content: content,\n          key: name + content\n        });\n      }\n      if (typeof content === \"string\") {\n        return /*#__PURE__*/React.createElement(\"meta\", {\n          name: name,\n          content: content,\n          key: name + content\n        });\n      }\n      return /*#__PURE__*/React.createElement(\"meta\", _extends({\n        key: name + JSON.stringify(content)\n      }, content));\n    });\n  }));\n}\nfunction V2Meta() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let {\n    errors,\n    matches: routerMatches,\n    loaderData\n  } = useDataRouterStateContext();\n  let location = useLocation();\n  let _matches = errors ? routerMatches.slice(0, routerMatches.findIndex(m => errors[m.route.id]) + 1) : routerMatches;\n  let meta = [];\n  let leafMeta = null;\n  let matches = [];\n  for (let i = 0; i < _matches.length; i++) {\n    let _match = _matches[i];\n    let routeId = _match.route.id;\n    let data = loaderData[routeId];\n    let params = _match.params;\n    let routeModule = routeModules[routeId];\n    let routeMeta = [];\n    let match = {\n      id: routeId,\n      data,\n      meta: [],\n      params: _match.params,\n      pathname: _match.pathname,\n      handle: _match.route.handle,\n      // TODO: Remove in v2. Only leaving it for now because we used it in\n      // examples and there's no reason to crash someone's build for one line.\n      // They'll get a TS error from the type updates anyway.\n      // @ts-expect-error\n      get route() {\n        console.warn(\"The meta function in \" + _match.route.path + \" accesses the `route` property on `matches`. This is deprecated and will be removed in Remix version 2. See\");\n        return _match.route;\n      }\n    };\n    matches[i] = match;\n    if (routeModule !== null && routeModule !== void 0 && routeModule.meta) {\n      routeMeta = typeof routeModule.meta === \"function\" ? routeModule.meta({\n        data,\n        params,\n        location,\n        matches\n      }) : Array.isArray(routeModule.meta) ? [...routeModule.meta] : routeModule.meta;\n    } else if (leafMeta) {\n      // We only assign the route's meta to the nearest leaf if there is no meta\n      // export in the route. The meta function may return a falsey value which\n      // is effectively the same as an empty array.\n      routeMeta = [...leafMeta];\n    }\n    routeMeta = routeMeta || [];\n    if (!Array.isArray(routeMeta)) {\n      throw new Error(\"The `v2_meta` API is enabled in the Remix config, but the route at \" + _match.route.path + \" returns an invalid value. In v2, all route meta functions must \" + \"return an array of meta objects.\" +\n      // TODO: Add link to the docs once they are written\n      // \"\\n\\nTo reference future flags and the v2 meta API, see https://remix.run/file-conventions/remix-config#future-v2-meta.\" +\n      \"\\n\\nTo reference the v1 meta function API, see https://remix.run/route/meta\");\n    }\n    match.meta = routeMeta;\n    matches[i] = match;\n    meta = [...routeMeta];\n    leafMeta = meta;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, meta.flat().map(metaProps => {\n    if (!metaProps) {\n      return null;\n    }\n    if (\"tagName\" in metaProps) {\n      let tagName = metaProps.tagName;\n      delete metaProps.tagName;\n      if (!isValidMetaTag(tagName)) {\n        console.warn(`A meta object uses an invalid tagName: ${tagName}. Expected either 'link' or 'meta'`);\n        return null;\n      }\n      let Comp = tagName;\n      return /*#__PURE__*/React.createElement(Comp, _extends({\n        key: JSON.stringify(metaProps)\n      }, metaProps));\n    }\n    if (\"title\" in metaProps) {\n      return /*#__PURE__*/React.createElement(\"title\", {\n        key: \"title\"\n      }, String(metaProps.title));\n    }\n    if (\"charset\" in metaProps) {\n      metaProps.charSet ?? (metaProps.charSet = metaProps.charset);\n      delete metaProps.charset;\n    }\n    if (\"charSet\" in metaProps && metaProps.charSet != null) {\n      return typeof metaProps.charSet === \"string\" ? /*#__PURE__*/React.createElement(\"meta\", {\n        key: \"charSet\",\n        charSet: metaProps.charSet\n      }) : null;\n    }\n    if (\"script:ld+json\" in metaProps) {\n      let json = null;\n      try {\n        json = JSON.stringify(metaProps[\"script:ld+json\"]);\n      } catch (err) {}\n      return json != null && /*#__PURE__*/React.createElement(\"script\", {\n        key: \"script:ld+json\",\n        type: \"application/ld+json\",\n        dangerouslySetInnerHTML: {\n          __html: JSON.stringify(metaProps[\"script:ld+json\"])\n        }\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"meta\", _extends({\n      key: JSON.stringify(metaProps)\n    }, metaProps));\n  }));\n}\nfunction isValidMetaTag(tagName) {\n  return typeof tagName === \"string\" && /^(meta|link)$/.test(tagName);\n}\nfunction Meta() {\n  let {\n    future\n  } = useRemixContext();\n  return future !== null && future !== void 0 && future.v2_meta ? /*#__PURE__*/React.createElement(V2Meta, null) : /*#__PURE__*/React.createElement(V1Meta, null);\n}\nfunction Await(props) {\n  return /*#__PURE__*/React.createElement(Await$1, props);\n}\n\n/**\n * Tracks whether Remix has finished hydrating or not, so scripts can be skipped\n * during client-side updates.\n */\nlet isHydrated = false;\n/**\n * Renders the `<script>` tags needed for the initial render. Bundles for\n * additional routes are loaded later as needed.\n *\n * @param props Additional properties to add to each script tag that is rendered.\n * In addition to scripts, \\<link rel=\"modulepreload\"> tags receive the crossOrigin\n * property if provided.\n *\n * @see https://remix.run/components/scripts\n */\nfunction Scripts(props) {\n  let {\n    manifest,\n    serverHandoffString,\n    abortDelay,\n    serializeError\n  } = useRemixContext();\n  let {\n    router,\n    static: isStatic,\n    staticContext\n  } = useDataRouterContext();\n  let {\n    matches\n  } = useDataRouterStateContext();\n  let navigation = useNavigation();\n  React.useEffect(() => {\n    isHydrated = true;\n  }, []);\n  let serializePreResolvedErrorImp = (key, error) => {\n    let toSerialize;\n    if (serializeError && error instanceof Error) {\n      toSerialize = serializeError(error);\n    } else {\n      toSerialize = error;\n    }\n    return `${JSON.stringify(key)}:__remixContext.p(!1, ${escapeHtml(JSON.stringify(toSerialize))})`;\n  };\n  let serializePreresolvedDataImp = (routeId, key, data) => {\n    let serializedData;\n    try {\n      serializedData = JSON.stringify(data);\n    } catch (error) {\n      return serializePreResolvedErrorImp(key, error);\n    }\n    return `${JSON.stringify(key)}:__remixContext.p(${escapeHtml(serializedData)})`;\n  };\n  let serializeErrorImp = (routeId, key, error) => {\n    let toSerialize;\n    if (serializeError && error instanceof Error) {\n      toSerialize = serializeError(error);\n    } else {\n      toSerialize = error;\n    }\n    return `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(key)}, !1, ${escapeHtml(JSON.stringify(toSerialize))})`;\n  };\n  let serializeDataImp = (routeId, key, data) => {\n    let serializedData;\n    try {\n      serializedData = JSON.stringify(data);\n    } catch (error) {\n      return serializeErrorImp(routeId, key, error);\n    }\n    return `__remixContext.r(${JSON.stringify(routeId)}, ${JSON.stringify(key)}, ${escapeHtml(serializedData)})`;\n  };\n  let deferredScripts = [];\n  let initialScripts = React.useMemo(() => {\n    var _manifest$hmr;\n    let contextScript = staticContext ? `window.__remixContext = ${serverHandoffString};` : \" \";\n    let activeDeferreds = staticContext === null || staticContext === void 0 ? void 0 : staticContext.activeDeferreds;\n    // This sets up the __remixContext with utility functions used by the\n    // deferred scripts.\n    // - __remixContext.p is a function that takes a resolved value or error and returns a promise.\n    //   This is used for transmitting pre-resolved promises from the server to the client.\n    // - __remixContext.n is a function that takes a routeID and key to returns a promise for later\n    //   resolution by the subsequently streamed chunks.\n    // - __remixContext.r is a function that takes a routeID, key and value or error and resolves\n    //   the promise created by __remixContext.n.\n    // - __remixContext.t is a a map or routeId to keys to an object containing `e` and `r` methods\n    //   to resolve or reject the promise created by __remixContext.n.\n    // - __remixContext.a is the active number of deferred scripts that should be rendered to match\n    //   the SSR tree for hydration on the client.\n    contextScript += !activeDeferreds ? \"\" : [\"__remixContext.p = function(v,e,p,x) {\", \"  if (typeof e !== 'undefined') {\", process.env.NODE_ENV === \"development\" ? \"    x=new Error(e.message);\\n    x.stack=e.stack;\" : '    x=new Error(\"Unexpected Server Error\");\\n    x.stack=undefined;', \"    p=Promise.reject(x);\", \"  } else {\", \"    p=Promise.resolve(v);\", \"  }\", \"  return p;\", \"};\", \"__remixContext.n = function(i,k) {\", \"  __remixContext.t = __remixContext.t || {};\", \"  __remixContext.t[i] = __remixContext.t[i] || {};\", \"  let p = new Promise((r, e) => {__remixContext.t[i][k] = {r:(v)=>{r(v);},e:(v)=>{e(v);}};});\", typeof abortDelay === \"number\" ? `setTimeout(() => {if(typeof p._error !== \"undefined\" || typeof p._data !== \"undefined\"){return;} __remixContext.t[i][k].e(new Error(\"Server timeout.\"))}, ${abortDelay});` : \"\", \"  return p;\", \"};\", \"__remixContext.r = function(i,k,v,e,p,x) {\", \"  p = __remixContext.t[i][k];\", \"  if (typeof e !== 'undefined') {\", process.env.NODE_ENV === \"development\" ? \"    x=new Error(e.message);\\n    x.stack=e.stack;\" : '    x=new Error(\"Unexpected Server Error\");\\n    x.stack=undefined;', \"    p.e(x);\", \"  } else {\", \"    p.r(v);\", \"  }\", \"};\"].join(\"\\n\") + Object.entries(activeDeferreds).map(([routeId, deferredData]) => {\n      let pendingKeys = new Set(deferredData.pendingKeys);\n      let promiseKeyValues = deferredData.deferredKeys.map(key => {\n        if (pendingKeys.has(key)) {\n          deferredScripts.push( /*#__PURE__*/React.createElement(DeferredHydrationScript, {\n            key: `${routeId} | ${key}`,\n            deferredData: deferredData,\n            routeId: routeId,\n            dataKey: key,\n            scriptProps: props,\n            serializeData: serializeDataImp,\n            serializeError: serializeErrorImp\n          }));\n          return `${JSON.stringify(key)}:__remixContext.n(${JSON.stringify(routeId)}, ${JSON.stringify(key)})`;\n        } else {\n          let trackedPromise = deferredData.data[key];\n          if (typeof trackedPromise._error !== \"undefined\") {\n            return serializePreResolvedErrorImp(key, trackedPromise._error);\n          } else {\n            return serializePreresolvedDataImp(routeId, key, trackedPromise._data);\n          }\n        }\n      }).join(\",\\n\");\n      return `Object.assign(__remixContext.state.loaderData[${JSON.stringify(routeId)}], {${promiseKeyValues}});`;\n    }).join(\"\\n\") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : \"\");\n    let routeModulesScript = !isStatic ? \" \" : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : \"\"}import ${JSON.stringify(manifest.url)};\n${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join(\"\\n\")}\nwindow.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(\",\")}};\n\nimport(${JSON.stringify(manifest.entry.module)});`;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(contextScript),\n      type: undefined\n    })), /*#__PURE__*/React.createElement(\"script\", _extends({}, props, {\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: createHtml(routeModulesScript),\n      type: \"module\",\n      async: true\n    })));\n    // disabled deps array because we are purposefully only rendering this once\n    // for hydration, after that we want to just continue rendering the initial\n    // scripts as they were when the page first loaded\n    // eslint-disable-next-line\n  }, []);\n  if (!isStatic && typeof __remixContext === \"object\" && __remixContext.a) {\n    for (let i = 0; i < __remixContext.a; i++) {\n      deferredScripts.push( /*#__PURE__*/React.createElement(DeferredHydrationScript, {\n        key: i,\n        scriptProps: props,\n        serializeData: serializeDataImp,\n        serializeError: serializeErrorImp\n      }));\n    }\n  }\n\n  // avoid waterfall when importing the next route module\n  let nextMatches = React.useMemo(() => {\n    if (navigation.location) {\n      // FIXME: can probably use transitionManager `nextMatches`\n      let matches = matchRoutes(router.routes, navigation.location);\n      invariant(matches, `No routes match path \"${navigation.location.pathname}\"`);\n      return matches;\n    }\n    return [];\n  }, [navigation.location, router.routes]);\n  let routePreloads = matches.concat(nextMatches).map(match => {\n    let route = manifest.routes[match.route.id];\n    return (route.imports || []).concat([route.module]);\n  }).flat(1);\n  let preloads = isHydrated ? [] : manifest.entry.imports.concat(routePreloads);\n  return isHydrated ? null : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"link\", {\n    rel: \"modulepreload\",\n    href: manifest.entry.module,\n    crossOrigin: props.crossOrigin\n  }), dedupe(preloads).map(path => /*#__PURE__*/React.createElement(\"link\", {\n    key: path,\n    rel: \"modulepreload\",\n    href: path,\n    crossOrigin: props.crossOrigin\n  })), initialScripts, deferredScripts);\n}\nfunction DeferredHydrationScript({\n  dataKey,\n  deferredData,\n  routeId,\n  scriptProps,\n  serializeData,\n  serializeError\n}) {\n  if (typeof document === \"undefined\" && deferredData && dataKey && routeId) {\n    invariant(deferredData.pendingKeys.includes(dataKey), `Deferred data for route ${routeId} with key ${dataKey} was not pending but tried to render a script for it.`);\n  }\n  return /*#__PURE__*/React.createElement(React.Suspense, {\n    fallback:\n    // This makes absolutely no sense. The server renders null as a fallback,\n    // but when hydrating, we need to render a script tag to avoid a hydration issue.\n    // To reproduce a hydration mismatch, just render null as a fallback.\n    typeof document === \"undefined\" && deferredData && dataKey && routeId ? null : /*#__PURE__*/React.createElement(\"script\", _extends({}, scriptProps, {\n      async: true,\n      suppressHydrationWarning: true,\n      dangerouslySetInnerHTML: {\n        __html: \" \"\n      }\n    }))\n  }, typeof document === \"undefined\" && deferredData && dataKey && routeId ? /*#__PURE__*/React.createElement(Await, {\n    resolve: deferredData.data[dataKey],\n    errorElement: /*#__PURE__*/React.createElement(ErrorDeferredHydrationScript, {\n      dataKey: dataKey,\n      routeId: routeId,\n      scriptProps: scriptProps,\n      serializeError: serializeError\n    }),\n    children: data => {\n      return /*#__PURE__*/React.createElement(\"script\", _extends({}, scriptProps, {\n        async: true,\n        suppressHydrationWarning: true,\n        dangerouslySetInnerHTML: {\n          __html: serializeData(routeId, dataKey, data)\n        }\n      }));\n    }\n  }) : /*#__PURE__*/React.createElement(\"script\", _extends({}, scriptProps, {\n    async: true,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: \" \"\n    }\n  })));\n}\nfunction ErrorDeferredHydrationScript({\n  dataKey,\n  routeId,\n  scriptProps,\n  serializeError\n}) {\n  let error = useAsyncError();\n  return /*#__PURE__*/React.createElement(\"script\", _extends({}, scriptProps, {\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: serializeError(routeId, dataKey, error)\n    }\n  }));\n}\nfunction dedupe(array) {\n  return [...new Set(array)];\n}\n\n// TODO: Can this be re-exported from RR?\n\nfunction useMatches() {\n  let {\n    routeModules\n  } = useRemixContext();\n  let matches = useMatches$1();\n  return React.useMemo(() => matches.map(match => {\n    let remixMatch = {\n      id: match.id,\n      pathname: match.pathname,\n      params: match.params,\n      data: match.data,\n      // Need to grab handle here since we don't have it at client-side route\n      // creation time\n      handle: routeModules[match.id].handle\n    };\n    return remixMatch;\n  }), [matches, routeModules]);\n}\n\n/**\n * Returns the JSON parsed data from the current route's `loader`.\n *\n * @see https://remix.run/hooks/use-loader-data\n */\nfunction useLoaderData() {\n  return useLoaderData$1();\n}\n\n/**\n * Returns the loaderData for the given routeId.\n *\n * @see https://remix.run/hooks/use-route-loader-data\n */\nfunction useRouteLoaderData(routeId) {\n  return useRouteLoaderData$1(routeId);\n}\n\n/**\n * Returns the JSON parsed data from the current route's `action`.\n *\n * @see https://remix.run/hooks/use-action-data\n */\nfunction useActionData() {\n  return useActionData$1();\n}\n\n/**\n * Returns everything you need to know about a page transition to build pending\n * navigation indicators and optimistic UI on data mutations.\n *\n * @deprecated in favor of useNavigation\n *\n * @see https://remix.run/hooks/use-transition\n */\nfunction useTransition() {\n  let navigation = useNavigation();\n  React.useEffect(() => {\n    logDeprecationOnce(useTransitionWarning);\n  }, []);\n  return React.useMemo(() => convertNavigationToTransition(navigation), [navigation]);\n}\nfunction convertNavigationToTransition(navigation) {\n  let {\n    location,\n    state,\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = navigation;\n  if (!location) {\n    return IDLE_TRANSITION;\n  }\n  let isActionSubmission = formMethod != null && [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(formMethod.toUpperCase());\n  if (state === \"submitting\" && formMethod && formAction && formEncType && formData) {\n    if (isActionSubmission) {\n      // Actively submitting to an action\n      let transition = {\n        location,\n        state,\n        submission: {\n          method: formMethod.toUpperCase(),\n          action: formAction,\n          encType: formEncType,\n          formData: formData,\n          key: \"\"\n        },\n        type: \"actionSubmission\"\n      };\n      return transition;\n    } else {\n      // @remix-run/router doesn't mark loader submissions as state: \"submitting\"\n      invariant(false, \"Encountered an unexpected navigation scenario in useTransition()\");\n    }\n  }\n  if (state === \"loading\") {\n    let {\n      _isRedirect,\n      _isFetchActionRedirect\n    } = location.state || {};\n    if (formMethod && formAction && formEncType && formData) {\n      if (!_isRedirect) {\n        if (isActionSubmission) {\n          // We're reloading the same location after an action submission\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"actionReload\"\n          };\n          return transition;\n        } else {\n          // The new router fixes a bug in useTransition where the submission\n          // \"action\" represents the request URL not the state of the <form> in\n          // the DOM.  Back-port it here to maintain behavior, but useNavigation\n          // will fix this bug.\n          let url = new URL(formAction, window.location.origin);\n\n          // This typing override should be safe since this is only running for\n          // GET submissions and over in @remix-run/router we have an invariant\n          // if you have any non-string values in your FormData when we attempt\n          // to convert them to URLSearchParams\n          url.search = new URLSearchParams(formData.entries()).toString();\n\n          // Actively \"submitting\" to a loader\n          let transition = {\n            location,\n            state: \"submitting\",\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: url.pathname + url.search,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"loaderSubmission\"\n          };\n          return transition;\n        }\n      } else {\n        // Redirecting after a submission\n        if (isActionSubmission) {\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"actionRedirect\"\n          };\n          return transition;\n        } else {\n          let transition = {\n            location,\n            state,\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData: formData,\n              key: \"\"\n            },\n            type: \"loaderSubmissionRedirect\"\n          };\n          return transition;\n        }\n      }\n    } else if (_isRedirect) {\n      if (_isFetchActionRedirect) {\n        let transition = {\n          location,\n          state,\n          submission: undefined,\n          type: \"fetchActionRedirect\"\n        };\n        return transition;\n      } else {\n        let transition = {\n          location,\n          state,\n          submission: undefined,\n          type: \"normalRedirect\"\n        };\n        return transition;\n      }\n    }\n  }\n\n  // If no scenarios above match, then it's a normal load!\n  let transition = {\n    location,\n    state: \"loading\",\n    submission: undefined,\n    type: \"normalLoad\"\n  };\n  return transition;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n *\n * @see https://remix.run/api/remix#usefetchers\n */\nfunction useFetchers() {\n  let fetchers = useFetchers$1();\n  return fetchers.map(f => {\n    let fetcher = convertRouterFetcherToRemixFetcher({\n      state: f.state,\n      data: f.data,\n      formMethod: f.formMethod,\n      formAction: f.formAction,\n      formEncType: f.formEncType,\n      formData: f.formData,\n      json: f.json,\n      text: f.text,\n      \" _hasFetcherDoneAnything \": f[\" _hasFetcherDoneAnything \"]\n    });\n    addFetcherDeprecationWarnings(fetcher);\n    return fetcher;\n  });\n}\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n *\n * @see https://remix.run/hooks/use-fetcher\n */\nfunction useFetcher() {\n  let fetcherRR = useFetcher$1();\n  return React.useMemo(() => {\n    let remixFetcher = convertRouterFetcherToRemixFetcher({\n      state: fetcherRR.state,\n      data: fetcherRR.data,\n      formMethod: fetcherRR.formMethod,\n      formAction: fetcherRR.formAction,\n      formEncType: fetcherRR.formEncType,\n      formData: fetcherRR.formData,\n      json: fetcherRR.json,\n      text: fetcherRR.text,\n      \" _hasFetcherDoneAnything \": fetcherRR[\" _hasFetcherDoneAnything \"]\n    });\n    let fetcherWithComponents = {\n      ...remixFetcher,\n      load: fetcherRR.load,\n      submit: fetcherRR.submit,\n      Form: fetcherRR.Form\n    };\n    addFetcherDeprecationWarnings(fetcherWithComponents);\n    return fetcherWithComponents;\n  }, [fetcherRR]);\n}\nfunction addFetcherDeprecationWarnings(fetcher) {\n  let type = fetcher.type;\n  Object.defineProperty(fetcher, \"type\", {\n    get() {\n      logDeprecationOnce(fetcherTypeWarning);\n      return type;\n    },\n    set(value) {\n      // Devs should *not* be doing this but we don't want to break their\n      // current app if they are\n      type = value;\n    },\n    // These settings should make this behave like a normal object `type` field\n    configurable: true,\n    enumerable: true\n  });\n  let submission = fetcher.submission;\n  Object.defineProperty(fetcher, \"submission\", {\n    get() {\n      logDeprecationOnce(fetcherSubmissionWarning);\n      return submission;\n    },\n    set(value) {\n      // Devs should *not* be doing this but we don't want to break their\n      // current app if they are\n      submission = value;\n    },\n    // These settings should make this behave like a normal object `type` field\n    configurable: true,\n    enumerable: true\n  });\n}\nfunction convertRouterFetcherToRemixFetcher(fetcherRR) {\n  let {\n    state,\n    formMethod,\n    formAction,\n    formEncType,\n    formData,\n    json,\n    text,\n    data\n  } = fetcherRR;\n  let isActionSubmission = formMethod != null && [\"POST\", \"PUT\", \"PATCH\", \"DELETE\"].includes(formMethod.toUpperCase());\n  if (state === \"idle\") {\n    if (fetcherRR[\" _hasFetcherDoneAnything \"] === true) {\n      let fetcher = {\n        state: \"idle\",\n        type: \"done\",\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        json: undefined,\n        text: undefined,\n        submission: undefined,\n        data\n      };\n      return fetcher;\n    } else {\n      let fetcher = IDLE_FETCHER;\n      return fetcher;\n    }\n  }\n  if (state === \"submitting\" && formMethod && formAction && formEncType && (formData || json !== undefined || text !== undefined)) {\n    if (isActionSubmission) {\n      // Actively submitting to an action\n      let fetcher = {\n        state,\n        type: \"actionSubmission\",\n        formMethod: formMethod.toUpperCase(),\n        formAction,\n        formEncType,\n        formData,\n        json,\n        text,\n        // @ts-expect-error formData/json/text are mutually exclusive in the type,\n        // so TS can't be sure these meet that criteria, but as a straight\n        // assignment from the RR fetcher we know they will\n        submission: {\n          method: formMethod.toUpperCase(),\n          action: formAction,\n          encType: formEncType,\n          formData,\n          json,\n          text,\n          key: \"\"\n        },\n        data\n      };\n      return fetcher;\n    } else {\n      // @remix-run/router doesn't mark loader submissions as state: \"submitting\"\n      invariant(false, \"Encountered an unexpected fetcher scenario in useFetcher()\");\n    }\n  }\n  if (state === \"loading\") {\n    if (formMethod && formAction && formEncType) {\n      if (isActionSubmission) {\n        if (data) {\n          // In a loading state but we have data - must be an actionReload\n          let fetcher = {\n            state,\n            type: \"actionReload\",\n            formMethod: formMethod.toUpperCase(),\n            formAction,\n            formEncType,\n            formData,\n            json,\n            text,\n            // @ts-expect-error formData/json/text are mutually exclusive in the type,\n            // so TS can't be sure these meet that criteria, but as a straight\n            // assignment from the RR fetcher we know they will\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData,\n              json,\n              text,\n              key: \"\"\n            },\n            data\n          };\n          return fetcher;\n        } else {\n          let fetcher = {\n            state,\n            type: \"actionRedirect\",\n            formMethod: formMethod.toUpperCase(),\n            formAction,\n            formEncType,\n            formData,\n            json,\n            text,\n            // @ts-expect-error formData/json/text are mutually exclusive in the type,\n            // so TS can't be sure these meet that criteria, but as a straight\n            // assignment from the RR fetcher we know they will\n            submission: {\n              method: formMethod.toUpperCase(),\n              action: formAction,\n              encType: formEncType,\n              formData,\n              json,\n              text,\n              key: \"\"\n            },\n            data: undefined\n          };\n          return fetcher;\n        }\n      } else {\n        // The new router fixes a bug in useTransition where the submission\n        // \"action\" represents the request URL not the state of the <form> in\n        // the DOM.  Back-port it here to maintain behavior, but useNavigation\n        // will fix this bug.\n        let url = new URL(formAction, window.location.origin);\n        if (formData) {\n          // This typing override should be safe since this is only running for\n          // GET submissions and over in @remix-run/router we have an invariant\n          // if you have any non-string values in your FormData when we attempt\n          // to convert them to URLSearchParams\n          url.search = new URLSearchParams(formData.entries()).toString();\n        }\n\n        // Actively \"submitting\" to a loader\n        let fetcher = {\n          state: \"submitting\",\n          type: \"loaderSubmission\",\n          formMethod: formMethod.toUpperCase(),\n          formAction,\n          formEncType,\n          formData,\n          json,\n          text,\n          // @ts-expect-error formData/json/text are mutually exclusive in the type,\n          // so TS can't be sure these meet that criteria, but as a straight\n          // assignment from the RR fetcher we know they will\n          submission: {\n            method: formMethod.toUpperCase(),\n            action: url.pathname + url.search,\n            encType: formEncType,\n            formData,\n            json,\n            text,\n            key: \"\"\n          },\n          data\n        };\n        return fetcher;\n      }\n    }\n  }\n\n  // If all else fails, it's a normal load!\n  let fetcher = {\n    state: \"loading\",\n    type: \"normalLoad\",\n    formMethod: undefined,\n    formAction: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    formEncType: undefined,\n    submission: undefined,\n    data\n  };\n  return fetcher;\n}\n\n// Dead Code Elimination magic for production builds.\n// This way devs don't have to worry about doing the NODE_ENV check themselves.\n// If running an un-bundled server outside of `remix dev` you will still need\n// to set the REMIX_DEV_SERVER_WS_PORT manually.\nconst LiveReload = process.env.NODE_ENV !== \"development\" ? () => null : function LiveReload({\n  port,\n  timeoutMs = 1000,\n  nonce = undefined\n}) {\n  let js = String.raw;\n  return /*#__PURE__*/React.createElement(\"script\", {\n    nonce: nonce,\n    suppressHydrationWarning: true,\n    dangerouslySetInnerHTML: {\n      __html: js`\n                function remixLiveReloadConnect(config) {\n                  let REMIX_DEV_ORIGIN = ${JSON.stringify(process.env.REMIX_DEV_ORIGIN)};\n                  let protocol =\n                    REMIX_DEV_ORIGIN ? new URL(REMIX_DEV_ORIGIN).protocol.replace(/^http/, \"ws\") :\n                    location.protocol === \"https:\" ? \"wss:\" : \"ws:\"; // remove in v2?\n                  let hostname = location.hostname;\n                  let url = new URL(protocol + \"//\" + hostname + \"/socket\");\n\n                  url.port =\n                    ${port} ||\n                    REMIX_DEV_ORIGIN ? new URL(REMIX_DEV_ORIGIN).port :\n                    Number(${\n      // TODO: remove in v2\n      process.env.REMIX_DEV_SERVER_WS_PORT}) ||\n                    8002;\n\n                  let ws = new WebSocket(url.href);\n                  ws.onmessage = async (message) => {\n                    let event = JSON.parse(message.data);\n                    if (event.type === \"LOG\") {\n                      console.log(event.message);\n                    }\n                    if (event.type === \"RELOAD\") {\n                      console.log(\"💿 Reloading window ...\");\n                      window.location.reload();\n                    }\n                    if (event.type === \"HMR\") {\n                      if (!window.__hmr__ || !window.__hmr__.contexts) {\n                        console.log(\"💿 [HMR] No HMR context, reloading window ...\");\n                        window.location.reload();\n                        return;\n                      }\n                      if (!event.updates || !event.updates.length) return;\n                      let updateAccepted = false;\n                      let needsRevalidation = new Set();\n                      for (let update of event.updates) {\n                        console.log(\"[HMR] \" + update.reason + \" [\" + update.id +\"]\")\n                        if (update.revalidate) {\n                          needsRevalidation.add(update.routeId);\n                          console.log(\"[HMR] Revalidating [\" + update.routeId + \"]\");\n                        }\n                        let imported = await import(update.url +  '?t=' + event.assetsManifest.hmr.timestamp);\n                        if (window.__hmr__.contexts[update.id]) {\n                          let accepted = window.__hmr__.contexts[update.id].emit(\n                            imported\n                          );\n                          if (accepted) {\n                            console.log(\"[HMR] Updated accepted by\", update.id);\n                            updateAccepted = true;\n                          }\n                        }\n                      }\n                      if (event.assetsManifest && window.__hmr__.contexts[\"remix:manifest\"]) {\n                        let accepted = window.__hmr__.contexts[\"remix:manifest\"].emit(\n                          { needsRevalidation, assetsManifest: event.assetsManifest }\n                        );\n                        if (accepted) {\n                          console.log(\"[HMR] Updated accepted by\", \"remix:manifest\");\n                          updateAccepted = true;\n                        }\n                      }\n                      if (!updateAccepted) {\n                        console.log(\"[HMR] Updated rejected, reloading...\");\n                        window.location.reload();\n                      }\n                    }\n                  };\n                  ws.onopen = () => {\n                    if (config && typeof config.onOpen === \"function\") {\n                      config.onOpen();\n                    }\n                  };\n                  ws.onclose = (event) => {\n                    if (event.code === 1006) {\n                      console.log(\"Remix dev asset server web socket closed. Reconnecting...\");\n                      setTimeout(\n                        () =>\n                          remixLiveReloadConnect({\n                            onOpen: () => window.location.reload(),\n                          }),\n                      ${String(timeoutMs)}\n                      );\n                    }\n                  };\n                  ws.onerror = (error) => {\n                    console.log(\"Remix dev asset server web socket error:\");\n                    console.error(error);\n                  };\n                }\n                remixLiveReloadConnect();\n              `\n    }\n  });\n};\nfunction mergeRefs(...refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        ref.current = value;\n      }\n    });\n  };\n}\n\nexport { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, RemixContext, RemixRoute, RemixRouteError, Scripts, composeEventHandlers, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useRouteLoaderData, useTransition };\n","/**\n * @remix-run/testing v1.19.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_RemixContext } from '@remix-run/react';\nimport { createMemoryRouter, RouterProvider } from 'react-router-dom';\n\nfunction patchRoutesWithContext(routes, context) {\n  return routes.map(route => {\n    if (route.loader) {\n      let loader = route.loader;\n      route.loader = args => loader({\n        ...args,\n        context\n      });\n    }\n    if (route.action) {\n      let action = route.action;\n      route.action = args => action({\n        ...args,\n        context\n      });\n    }\n    if (route.children) {\n      return {\n        ...route,\n        children: patchRoutesWithContext(route.children, context)\n      };\n    }\n    return route;\n  });\n}\nfunction createRemixStub(routes, context = {}) {\n  return function RemixStub({\n    initialEntries,\n    initialIndex,\n    hydrationData,\n    remixConfigFuture\n  }) {\n    let routerRef = React.useRef();\n    let remixContextRef = React.useRef();\n    if (routerRef.current == null) {\n      // update the routes to include context in the loader/action\n      let patched = patchRoutesWithContext(routes, context);\n      routerRef.current = createMemoryRouter(patched, {\n        initialEntries,\n        initialIndex,\n        hydrationData\n      });\n    }\n    if (remixContextRef.current == null) {\n      remixContextRef.current = {\n        future: {\n          v2_dev: false,\n          unstable_postcss: false,\n          unstable_tailwind: false,\n          v2_errorBoundary: false,\n          v2_headers: false,\n          v2_meta: false,\n          v2_normalizeFormMethod: false,\n          v2_routeConvention: false,\n          ...remixConfigFuture\n        },\n        manifest: createManifest(routerRef.current.routes),\n        routeModules: createRouteModules(routerRef.current.routes)\n      };\n    }\n    return /*#__PURE__*/React.createElement(UNSAFE_RemixContext.Provider, {\n      value: remixContextRef.current\n    }, /*#__PURE__*/React.createElement(RouterProvider, {\n      router: routerRef.current\n    }));\n  };\n}\nfunction createManifest(routes) {\n  return {\n    routes: createRouteManifest(routes),\n    entry: {\n      imports: [],\n      module: \"\"\n    },\n    url: \"\",\n    version: \"\"\n  };\n}\nfunction createRouteManifest(routes, manifest, parentId) {\n  return routes.reduce((manifest, route) => {\n    if (route.children) {\n      createRouteManifest(route.children, manifest, route.id);\n    }\n    manifest[route.id] = convertToEntryRoute(route, parentId);\n    return manifest;\n  }, manifest || {});\n}\nfunction createRouteModules(routes, routeModules) {\n  return routes.reduce((modules, route) => {\n    if (route.children) {\n      createRouteModules(route.children, modules);\n    }\n    modules[route.id] = {\n      CatchBoundary: undefined,\n      ErrorBoundary: undefined,\n      // @ts-expect-error - types are still `agnostic` here\n      default: () => route.element,\n      handle: route.handle,\n      links: undefined,\n      meta: undefined,\n      shouldRevalidate: undefined\n    };\n    return modules;\n  }, routeModules || {});\n}\nfunction convertToEntryRoute(route, parentId) {\n  return {\n    id: route.id,\n    index: route.index,\n    caseSensitive: route.caseSensitive,\n    path: route.path,\n    parentId,\n    hasAction: !!route.action,\n    hasLoader: !!route.loader,\n    module: \"\",\n    hasCatchBoundary: false,\n    hasErrorBoundary: false\n  };\n}\n\nexport { createRemixStub };\n"],"file":"assets/create-remix-stub-a582cc4a.js"}