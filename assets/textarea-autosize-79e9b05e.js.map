{"version":3,"file":"textarea-autosize-79e9b05e.js","sources":["../../src/app/components/textarea-autosize.tsx"],"sourcesContent":["import { useLayoutEffect, useState, useRef } from \"react\";\nimport cx from \"classix\";\n\nexport const TextareaAutosize = (props: TitleProps): JSX.Element => {\n  const {\n    name,\n    value,\n    setValue,\n    placeholder,\n    readOnly,\n    autofocus,\n    textareaClassName,\n    onFocus,\n    onBlur,\n  } = props;\n\n  const [textareaHeight, setTextareaHeight] = useState<number>(40);\n  const textareaRef = useRef<HTMLParagraphElement>(null);\n\n  const handleOnFocus = (e: React.FocusEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    const length = target.value.length;\n    // Place cursor at the end of the current text\n    target.setSelectionRange(length, length);\n    if (onFocus) onFocus();\n  };\n\n  const handleTitleChange = (e: React.FormEvent<HTMLTextAreaElement>): void => {\n    const value = e.currentTarget.value;\n    setValue(value);\n  };\n\n  const valueIsNotOnlySpaces = (): boolean => {\n    return !/^( )\\1*$/.test(value);\n  };\n\n  useLayoutEffect(() => {\n    if (!textareaRef.current) return;\n\n    setTextareaHeight(textareaRef.current.scrollHeight);\n  }, [value]);\n\n  return (\n    <div className=\"relative\">\n      <textarea\n        name={name}\n        className={cx(\n          \"box-border w-full resize-none overflow-y-hidden rounded-md border-none bg-background-input p-3 text-font outline-2 hover:bg-background-input-hovered focus-visible:bg-background-input-pressed\",\n          textareaClassName\n        )}\n        value={value}\n        onChange={handleTitleChange}\n        placeholder={placeholder}\n        readOnly={readOnly}\n        onFocus={handleOnFocus}\n        onBlur={onBlur}\n        style={{ height: `${textareaHeight}px` }}\n        autoFocus={autofocus}\n      />\n      <p\n        ref={textareaRef}\n        className={cx(\n          \"absolute left-0 top-0 -z-10 box-border overflow-y-hidden p-3 opacity-0\",\n          textareaClassName\n        )}\n      >\n        {(valueIsNotOnlySpaces() && value) || placeholder}\n      </p>\n    </div>\n  );\n};\n\ninterface TitleProps {\n  name: string;\n  value: string;\n  setValue: (value: string) => void;\n  placeholder: string;\n  autofocus?: boolean;\n  readOnly?: boolean;\n  textareaClassName?: string;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n"],"names":["TextareaAutosize","props","name","value","setValue","placeholder","readOnly","autofocus","textareaClassName","onFocus","onBlur","textareaHeight","setTextareaHeight","useState","textareaRef","useRef","handleOnFocus","e","target","length","handleTitleChange","value2","valueIsNotOnlySpaces","useLayoutEffect","jsxs","jsx","cx"],"mappings":"uIAGO,MAAAA,EAAAC,GAAA,CACL,KAAA,CAAM,KAAAC,EACJ,MAAAC,EACA,SAAAC,EACA,YAAAC,EACA,SAAAC,EACA,UAAAC,EACA,kBAAAC,EACA,QAAAC,EACA,OAAAC,CACA,EAAAT,EAGF,CAAAU,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,SAAA,IAAA,EAEAC,EAAAC,GAAA,CACE,MAAAC,EAAAD,EAAA,cACAE,EAAAD,EAAA,MAAA,OAEAA,EAAA,kBAAAC,EAAAA,CAAA,EACAV,GAAaA,GAAQ,EAGvBW,EAAAH,GAAA,CACE,MAAAI,EAAAJ,EAAA,cAAA,MACAb,EAAAiB,CAAA,CAAc,EAGhBC,EAAA,IACE,CAAA,WAAA,KAAAnB,CAAA,EAGFoB,OAAAA,EAAAA,gBAAA,IAAA,CACET,EAAA,SAEAF,EAAAE,EAAA,QAAA,YAAA,CAAkD,EAAA,CAAAX,CAAA,CAAA,EAGpDqB,EAAA,MAAA,CAAA,UAAA,WAAA,SAAA,CAEIC,EAAA,WAAC,CAAA,KAAAvB,EACC,UAAAwB,EACW,iMACTlB,CACA,EACF,MAAAL,EACA,SAAAiB,EACU,YAAAf,EACV,SAAAC,EACA,QAAAU,EACS,OAAAN,EACT,MAAA,CAAA,OAAA,GAAAC,CAAA,IAAA,EACuC,UAAAJ,CAC5B,CAAA,EACbkB,EACA,IAAC,CAAA,IAAAX,EACM,UAAAY,EACM,yEACTlB,CACA,EACF,SAAAc,KAAAnB,GAAAE,CAEsC,CAAA,CACxC,CAAA,CAAA,CAGN"}