{"version":3,"file":"index-bf70942a.js","sources":["../../node_modules/.pnpm/@radix-ui+react-use-size@1.0.1_@types+react@18.2.15_react@18.2.0/node_modules/@radix-ui/react-use-size/dist/index.mjs"],"sourcesContent":["import {useState as $9gyGR$useState} from \"react\";\nimport {useLayoutEffect as $9gyGR$useLayoutEffect} from \"@radix-ui/react-use-layout-effect\";\n\n\n\nfunction $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {\n    const [size, setSize] = $9gyGR$useState(undefined);\n    $9gyGR$useLayoutEffect(()=>{\n        if (element) {\n            // provide size as early as possible\n            setSize({\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            });\n            const resizeObserver = new ResizeObserver((entries)=>{\n                if (!Array.isArray(entries)) return;\n                 // Since we only observe the one element, we don't need to loop over the\n                // array\n                if (!entries.length) return;\n                const entry = entries[0];\n                let width;\n                let height;\n                if ('borderBoxSize' in entry) {\n                    const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers\n                    const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n                    width = borderSize['inlineSize'];\n                    height = borderSize['blockSize'];\n                } else {\n                    // for browsers that don't support `borderBoxSize`\n                    // we calculate it ourselves to get the correct border box.\n                    width = element.offsetWidth;\n                    height = element.offsetHeight;\n                }\n                setSize({\n                    width: width,\n                    height: height\n                });\n            });\n            resizeObserver.observe(element, {\n                box: 'border-box'\n            });\n            return ()=>resizeObserver.unobserve(element)\n            ;\n        } else // We only want to reset to `undefined` when the element becomes `null`,\n        // not if it changes to another element.\n        setSize(undefined);\n    }, [\n        element\n    ]);\n    return size;\n}\n\n\n\n\nexport {$db6c3485150b8e66$export$1ab7ae714698c4b8 as useSize};\n//# sourceMappingURL=index.mjs.map\n"],"names":["$db6c3485150b8e66$export$1ab7ae714698c4b8","element","size","setSize","$9gyGR$useState","$9gyGR$useLayoutEffect","resizeObserver","entries","entry","width","height","borderSizeEntry","borderSize"],"mappings":"gFAKA,SAASA,EAA0CC,EAAS,CACxD,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAe,SAAC,MAAS,EACjDC,OAAAA,EAAuB,IAAI,CACvB,GAAIJ,EAAS,CAETE,EAAQ,CACJ,MAAOF,EAAQ,YACf,OAAQA,EAAQ,YAChC,CAAa,EACD,MAAMK,EAAiB,IAAI,eAAgBC,GAAU,CAIjD,GAHI,CAAC,MAAM,QAAQA,CAAO,GAGtB,CAACA,EAAQ,OAAQ,OACrB,MAAMC,EAAQD,EAAQ,CAAC,EACvB,IAAIE,EACAC,EACJ,GAAI,kBAAmBF,EAAO,CAC1B,MAAMG,EAAkBH,EAAM,cACxBI,EAAa,MAAM,QAAQD,CAAe,EAAIA,EAAgB,CAAC,EAAIA,EACzEF,EAAQG,EAAW,WACnBF,EAASE,EAAW,SACxC,MAGoBH,EAAQR,EAAQ,YAChBS,EAAST,EAAQ,aAErBE,EAAQ,CACJ,MAAOM,EACP,OAAQC,CAC5B,CAAiB,CACjB,CAAa,EACD,OAAAJ,EAAe,QAAQL,EAAS,CAC5B,IAAK,YACrB,CAAa,EACM,IAAIK,EAAe,UAAUL,CAAO,CAE9C,MAEDE,EAAQ,MAAS,CACzB,EAAO,CACCF,CACR,CAAK,EACMC,CACX","x_google_ignoreList":[0]}