{"version":3,"file":"button-e6a2bc29.js","sources":["../../src/app/components/button/button.tsx"],"sourcesContent":["import { forwardRef } from \"react\";\nimport cx from \"classix\";\n\nexport const Button = forwardRef<HTMLButtonElement, Props>(\n  (\n    {\n      children,\n      color = \"primary\",\n      variant = \"contained\",\n      size = \"md\",\n      className,\n      ...rest\n    },\n    forwardedRef\n  ) => {\n    const primaryStyle = (): string => {\n      if (variant === \"contained\") {\n        return \"bg-background-brand-bold text-font-inverse hover:bg-background-brand-bold-hovered active:bg-background-brand-bold-pressed\";\n      }\n\n      if (variant === \"subtlest\") {\n        return \"bg-background-brand-subtlest text-font-brand hover:bg-background-brand-subtlest-hovered active:bg-background-brand-subtlest-pressed\";\n      }\n\n      if (variant === \"text\") {\n        return \"text-font-brand hover:bg-background-brand-subtlest-hovered active:bg-background-brand-subtlest-pressed\";\n      }\n\n      return \"\";\n    };\n\n    const neutralStyle = (): string => {\n      if (variant === \"contained\") {\n        return \"bg-background-neutral-bold text-font-inverse hover:bg-background-neutral-bold-hovered active:bg-background-neutral-bold-pressed\";\n      }\n\n      if (variant === \"subtlest\") {\n        return \"bg-background-neutral hover:bg-background-neutral-hovered active:bg-background-neutral-pressed\";\n      }\n\n      if (variant === \"text\") {\n        return \"text-font-subtle hover:bg-background-neutral-hovered active:bg-background-neutral-pressed\";\n      }\n\n      return \"\";\n    };\n\n    const successStyle = (): string => {\n      if (variant === \"contained\") {\n        return \"bg-background-success-bold text-font-inverse hover:bg-background-success-bold-hovered active:bg-background-success-bold-pressed\";\n      }\n\n      if (variant === \"subtlest\") {\n        return \"bg-background-success text-font-success hover:bg-background-success-hovered active:bg-background-success-pressed\";\n      }\n\n      if (variant === \"text\") {\n        return \"text-font-success hover:bg-background-success-hovered active:bg-background-success-pressed\";\n      }\n\n      return \"\";\n    };\n\n    const dangerStyle = (): string => {\n      if (variant === \"contained\") {\n        return \"bg-background-danger-bold text-font-inverse hover:bg-background-danger-bold-hovered active:bg-background-danger-bold-pressed\";\n      }\n\n      if (variant === \"subtlest\") {\n        return \"bg-background-danger text-font-danger hover:bg-background-danger-hovered active:bg-background-danger-pressed\";\n      }\n\n      if (variant === \"text\") {\n        return \"text-font-danger hover:bg-background-danger-hovered active:bg-background-danger-pressed\";\n      }\n\n      return \"\";\n    };\n\n    const warningStyle = (): string => {\n      if (variant === \"contained\") {\n        return \"bg-background-warning-bold text-font-inverse hover:bg-background-warning-bold-hovered active:bg-background-warning-bold-pressed\";\n      }\n\n      if (variant === \"subtlest\") {\n        return \"bg-background-warning text-font-warning hover:bg-background-warning-hovered active:bg-background-warning-pressed\";\n      }\n\n      if (variant === \"text\") {\n        return \"text-font-warning hover:bg-background-warning-hovered active:bg-background-warning-pressed\";\n      }\n\n      return \"\";\n    };\n\n    const infoStyle = (): string => {\n      if (variant === \"contained\") {\n        return \"bg-background-info-bold text-font-inverse hover:bg-background-info-bold-hovered active:bg-background-info-bold-pressed\";\n      }\n\n      if (variant === \"subtlest\") {\n        return \"bg-background-info text-font-info hover:bg-background-info-hovered active:bg-background-info-pressed\";\n      }\n\n      if (variant === \"text\") {\n        return \"text-font-info hover:bg-background-info-hovered active:bg-background-info-pressed\";\n      }\n\n      return \"\";\n    };\n\n    return (\n      <button\n        ref={forwardedRef}\n        className={cx(\n          \"flex cursor-pointer items-center justify-center gap-2 rounded p-2 text-font disabled:cursor-not-allowed disabled:opacity-60\",\n          color === \"primary\" && primaryStyle(),\n          color === \"neutral\" && neutralStyle(),\n          color === \"success\" && successStyle(),\n          color === \"danger\" && dangerStyle(),\n          color === \"warning\" && warningStyle(),\n          color === \"info\" && infoStyle(),\n          size === \"lg\" && \"gap-3 px-8 py-2 text-lg\",\n          className\n        )}\n        {...rest}\n      >\n        {children}\n      </button>\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n\nexport interface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n  color?: \"primary\" | \"neutral\" | \"success\" | \"danger\" | \"warning\" | \"info\";\n  variant?: \"contained\" | \"subtlest\" | \"text\";\n  size?: \"md\" | \"lg\";\n}\n"],"names":["Button","forwardRef","children","color","variant","size","className","rest","forwardedRef","primaryStyle","neutralStyle","successStyle","dangerStyle","warningStyle","infoStyle","jsx","cx"],"mappings":"gIAGO,MAAAA,EAAAC,EAAA,WAAe,CAAA,CAElB,SAAAC,EACE,MAAAC,EAAA,UACQ,QAAAC,EAAA,YACE,KAAAC,EAAA,KACH,UAAAC,EACP,GAAAC,CACG,EAAAC,IAAA,CAIL,MAAAC,EAAA,IACEL,IAAA,YACE,4HAGFA,IAAA,WACE,sIAGFA,IAAA,OACE,yGAGF,GAGFM,EAAA,IACEN,IAAA,YACE,kIAGFA,IAAA,WACE,iGAGFA,IAAA,OACE,4FAGF,GAGFO,EAAA,IACEP,IAAA,YACE,kIAGFA,IAAA,WACE,mHAGFA,IAAA,OACE,6FAGF,GAGFQ,EAAA,IACER,IAAA,YACE,+HAGFA,IAAA,WACE,+GAGFA,IAAA,OACE,0FAGF,GAGFS,EAAA,IACET,IAAA,YACE,kIAGFA,IAAA,WACE,mHAGFA,IAAA,OACE,6FAGF,GAGFU,EAAA,IACEV,IAAA,YACE,yHAGFA,IAAA,WACE,uGAGFA,IAAA,OACE,oFAGF,GAGF,OAAAW,EACE,SAAC,CAAA,IAAAP,EACM,UAAAQ,EACM,8HACTb,IAAA,WAAAM,EAAA,EACoCN,IAAA,WAAAO,EAAA,EACAP,IAAA,WAAAQ,EAAA,EACAR,IAAA,UAAAS,EAAA,EACFT,IAAA,WAAAU,EAAA,EACEV,IAAA,QAAAW,EAAA,EACNT,IAAA,MAAA,0BACbC,CACjB,EACF,GAAAC,EACI,SAAAL,CAEH,CAAA,CACH,CAGN,EAEAF,EAAA,YAAA"}