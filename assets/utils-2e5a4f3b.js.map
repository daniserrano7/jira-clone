{"version":3,"file":"utils-2e5a4f3b.js","sources":["../../src/app/store/user.store.tsx","../../src/app/stories/utils.tsx"],"sourcesContent":["import { createContext, useContext } from \"react\";\nimport { User } from \"@domain/user\";\n\ninterface UserStore {\n  user: User;\n}\n\nconst UserContext = createContext<UserStore | undefined>(undefined);\n\nexport const UserContextProvider = ({\n  user,\n  children,\n}: {\n  user: User;\n  children: JSX.Element;\n}): JSX.Element => (\n  <UserContext.Provider value={{ user }}>{children}</UserContext.Provider>\n);\n\nexport const useUserStore = (): UserStore => {\n  const userStore = useContext(UserContext);\n  if (!userStore) {\n    throw new Error(\"User context not found\");\n  }\n  return userStore;\n};\n","import type { ReactRenderer } from \"@storybook/react\";\nimport type { PartialStoryFn } from \"@storybook/csf\";\nimport { unstable_createRemixStub as createRemixStub } from \"@remix-run/testing\";\nimport { userMock1 } from \"@domain/user\";\nimport { UserContextProvider } from \"@app/store/user.store\";\nimport { ThemeProvider, Theme, Preference } from \"@app/store/theme.store\";\n\nexport const withMainContext = (\n  Story: PartialStoryFn<ReactRenderer, Record<string, never>>\n): JSX.Element => {\n  return (\n    <UserContextProvider user={userMock1}>\n      <ThemeProvider\n        specifiedTheme={Theme.LIGHT}\n        specifiedPreference={Preference.SELECTED}\n      >\n        <div className=\"w-full\">\n          <Story />\n        </div>\n      </ThemeProvider>\n    </UserContextProvider>\n  );\n};\n\nexport const withRemixStub = (children: JSX.Element) => {\n  const RemixStub = createRemixStub([\n    {\n      path: \"/\",\n      element: children,\n      action: async () => {\n        return {\n          status: 200,\n        };\n      },\n    },\n  ]);\n\n  return <RemixStub />;\n};\n"],"names":["UserContext","createContext","UserContextProvider","user","children","jsx","useUserStore","userStore","useContext","withMainContext","Story","userMock1","ThemeProvider","Theme","Preference","withRemixStub","RemixStub","createRemixStub"],"mappings":"6OAOA,MAAAA,EAAAC,EAAAA,cAAA,MAAA,EAEOC,EAAA,CAAA,CAA6B,KAAAC,EAClC,SAAAC,CAEF,IAAAC,EAAAL,EAAA,SAAA,CAAA,MAAA,CAAA,KAAAG,CAAA,EAAA,SAAAC,CAAA,CAAA,EAOOE,EAAA,IAAA,CACL,MAAAC,EAAAC,aAAAR,CAAA,EACA,GAAA,CAAAO,EACE,MAAA,IAAA,MAAA,wBAAA,EAEF,OAAAA,CACF,8MClBO,MAAAE,EAAAC,GAGLL,EAAAH,EAAA,CAAA,KAAAS,EAAA,SAAAN,EAEIO,EAAC,CAAA,eAAAC,EAAA,MACuB,oBAAAC,EAAA,SACU,SAAAT,EAAA,MAAA,CAAA,UAAA,SAAA,SAAAA,EAAAK,EAAA,CAAA,CAAA,EAAA,CAIhC,CAAA,CAAA,CAAA,EAMDK,EAAAX,GAAA,CACL,MAAAY,EAAAC,EAAA,CAAkC,CAChC,KAAA,IACQ,QAAAb,EACG,OAAA,UAEP,CAAO,OAAA,GACG,EAEZ,CACF,CAAA,EAGF,OAAAC,EAAAW,EAAA,CAAA,CAAA,CACF"}