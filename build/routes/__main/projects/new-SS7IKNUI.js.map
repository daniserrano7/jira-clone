{
  "version": 3,
  "sources": ["../../../../../src/app/routes/__main/projects/new.tsx", "../../../../../src/app/ui/main/projects/create-project-panel/create-project-panel.view.tsx", "../../../../../node_modules/.pnpm/@radix-ui+react-checkbox@1.0.4_@types+react-dom@18.2.7_@types+react@18.2.15_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-checkbox/dist/packages/react/checkbox/src/index.ts", "../../../../../node_modules/.pnpm/@radix-ui+react-checkbox@1.0.4_@types+react-dom@18.2.7_@types+react@18.2.15_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-checkbox/dist/packages/react/checkbox/src/Checkbox.tsx", "../../../../../src/app/ui/main/projects/create-project-panel/create-project-panel-header.tsx"],
  "sourcesContent": ["import type {\n  LoaderFunction,\n  ActionFunction,\n  V2_MetaFunction,\n} from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { User, UserId } from \"@domain/user\";\nimport { Category, categoryTypes, categoryTypeDict } from \"@domain/category\";\nimport { getUsers } from \"@infrastructure/db/user\";\nimport { createProject } from \"@infrastructure/db/project\";\nimport { ProjectPanelView } from \"@app/ui/main/projects/create-project-panel/create-project-panel.view\";\nimport { textAreOnlySpaces } from \"@utils/text-are-only-spaces\";\nimport { getRandomProjectImage } from \"@utils/random-project-image\";\nimport { formatTags, formatProperties } from \"@utils/meta\";\n\nexport const meta: V2_MetaFunction = () => {\n  const title = \"Jira clone - Create project\";\n  const description = \"Create new project and assigne team members.\";\n  const image =\n    \"https://jira-clone.fly.dev/static/images/readme/projects-new.png\";\n  const url = \"https://jira-clone.fly.dev/projects/new\";\n\n  const tags = {\n    charset: \"utf-8\",\n    viewport: \"width=device-width,initial-scale=1\",\n    title: title,\n    description: description,\n    \"twitter:card\": \"summary_large_image\",\n    \"twitter:site\": url,\n    \"twitter:domain\": \"jira-clone.fly.dev\",\n    \"twitter:title\": title,\n    \"twitter:description\": description,\n    \"twitter:image\": image,\n    \"twitter:image:width\": \"1268\",\n    \"twitter:image:height\": \"856\",\n    \"twitter:image:alt\": title,\n    \"twitter:creator\": \"@Jack_DanielSG\",\n    \"twitter:creator:id\": \"Jack_DanielSG\",\n  };\n\n  const properties = {\n    \"og:url\": url,\n    \"og:type\": \"website\",\n    \"og:site_name\": title,\n    \"og:title\": title,\n    \"og:description\": description,\n    \"og:image\": image,\n  };\n\n  return [...formatTags(tags), ...formatProperties(properties)];\n};\n\ntype LoaderData = {\n  users: User[];\n};\n\nexport type ActionData = {\n  errors: {\n    name?: string;\n    users?: string;\n  };\n};\n\nexport const loader: LoaderFunction = async () => {\n  const users = await getUsers();\n  return json<LoaderData>({ users });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const _action = formData.get(\"_action\") as string;\n  const name = formData.get(\"title\") as string;\n  const description = formData.get(\"description\") as string;\n  const users = formData.getAll(\"user\") as UserId[];\n\n  if (!(_action === \"upsert\" || _action === \"delete\")) {\n    throw new Error(\n      `Invalid action: '${_action}'. Values must be 'upsert' or 'delete'`\n    );\n  }\n\n  if (_action === \"upsert\") {\n    const errors: ActionData[\"errors\"] = {};\n\n    if (!name || textAreOnlySpaces(name)) {\n      errors.name = \"Name is required\";\n    }\n\n    if (users.length === 0) {\n      errors.users = \"At least one user is required\";\n    }\n\n    const isErrors = Object.keys(errors).length > 0;\n\n    if (isErrors) {\n      return json<ActionData>({ errors }, { status: 400 });\n    }\n\n    const categories: Omit<Category, \"id\">[] = categoryTypes.map(\n      (type, index) => ({\n        type,\n        name: categoryTypeDict[type],\n        order: index,\n        issues: [],\n      })\n    );\n\n    await createProject({\n      name,\n      description,\n      userIds: users,\n      image: getRandomProjectImage(),\n      categories,\n    });\n\n    return redirect(\"/projects\");\n  }\n};\n\nexport default function IssuePanelRoute() {\n  const { users } = useLoaderData() as LoaderData;\n  return <ProjectPanelView users={users} />;\n}\n", "import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { Form, useNavigate, useFetcher, useActionData } from \"@remix-run/react\";\nimport * as Dialog from \"@app/components/dialog\";\nimport * as Checkbox from \"@radix-ui/react-checkbox\";\nimport cx from \"classix\";\nimport { BsCheckLg } from \"react-icons/bs\";\nimport { User } from \"@domain/user\";\nimport { Project } from \"@domain/project\";\nimport { ActionData as ProjectActionData } from \"@app/routes/__main/projects/new\";\nimport { useUserStore } from \"@app/store/user.store\";\nimport { UserAvatar } from \"@app/components/user-avatar\";\nimport { Button } from \"@app/components/button\";\nimport { Title } from \"@app/components/title\";\nimport { Description } from \"@app/components/description\";\nimport { Kbd } from \"@app/components/kbd-placeholder\";\nimport { PanelHeaderProject } from \"./create-project-panel-header\";\n\nexport const ProjectPanelView = ({ project, users }: Props): JSX.Element => {\n  const [isOpen, setIsOpen] = useState(true);\n  const [portalContainer, setPortalContainer] = useState<HTMLDivElement | null>(\n    null\n  );\n  const formRef = useRef<HTMLFormElement>(null);\n  const fetcher = useFetcher();\n  const navigate = useNavigate();\n  const actionData = useActionData() as ProjectActionData;\n  const { user: loggedUser } = useUserStore();\n\n  const postData = useCallback(\n    (formTarget: HTMLFormElement) => {\n      const formData = new FormData(formTarget);\n      formData.set(\"_action\", \"upsert\");\n\n      fetcher.submit(formData, {\n        method: \"post\",\n      });\n    },\n    [fetcher]\n  );\n\n  const handleProgrammaticSubmit = useCallback((): void => {\n    if (formRef.current) {\n      postData(formRef.current);\n    }\n  }, [postData]);\n\n  const handleProgrammaticClose = (): void => {\n    setIsOpen(false);\n  };\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.shiftKey && e.key.toLowerCase() === \"s\") {\n        e.preventDefault();\n        handleProgrammaticSubmit();\n      }\n    },\n    [handleProgrammaticSubmit]\n  );\n\n  useEffect(() => {\n    const isErrors =\n      actionData?.errors && Object.keys(actionData?.errors).length > 0;\n\n    if (isErrors) {\n      document\n        .getElementById(\"project-panel-overlay\")\n        ?.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  }, [actionData]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", onKeyDown);\n\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n  }, [onKeyDown]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setTimeout(() => navigate(\"/projects\"), 300);\n    }\n  }, [isOpen, navigate]);\n\n  return (\n    <>\n      <Dialog.Root open={true}>\n        <Dialog.Portal container={portalContainer}>\n          <Dialog.Overlay\n            id=\"project-panel-overlay\"\n            className={isOpen ? \"\" : \"bg-opacity-0\"}\n          >\n            <Dialog.Content\n              onEscapeKeyDown={handleProgrammaticClose}\n              onPointerDownOutside={handleProgrammaticClose}\n              className={cx(\n                \"max-w-[600px]\",\n                !isOpen && \"translate-y-[10px] opacity-0\"\n              )}\n            >\n              <PanelHeaderProject id={project?.id || \"Create new project\"} />\n              <Form method=\"post\" ref={formRef}>\n                <div className=\"mb-6\">\n                  <Dialog.Title className=\"-ml-3 mb-8 mt-5\">\n                    <Title\n                      initTitle={project?.name || \"\"}\n                      maxLength={30}\n                      error={actionData?.errors?.name}\n                    />\n                  </Dialog.Title>\n                  <p className=\"font-primary-black\">Description</p>\n                  <div className=\"-ml-3 mb-5\">\n                    <Description initDescription={project?.description || \"\"} />\n                  </div>\n                  <ul className=\"space-y-1.5\">\n                    {users.map((user) => (\n                      <li\n                        key={user.id}\n                        className=\"-mx-2 rounded-lg px-2 outline outline-2 outline-transparent duration-75 ease-linear hover:bg-background-brand-subtlest hover:outline-border-brand\"\n                      >\n                        <label\n                          htmlFor={`checkbox-${user.id}`}\n                          className=\"flex w-full cursor-pointer items-center justify-between gap-4 py-3\"\n                        >\n                          <span className=\"flex items-center gap-4\">\n                            <UserAvatar {...user} size={48} />\n                            <span>{user.name}</span>\n                          </span>\n                          <Checkbox.Root\n                            id={`checkbox-${user.id}`}\n                            className=\"h-[36px] w-[36px] rounded-md bg-background-input\"\n                            name=\"user\"\n                            value={user.id}\n                            defaultChecked={user.id === loggedUser?.id}\n                          >\n                            <Checkbox.Indicator className=\"flex h-[36px] w-[36px] rounded-md bg-background-brand-bold duration-150 ease-in flex-center\">\n                              <BsCheckLg\n                                size={16}\n                                className=\"text-font-inverse\"\n                              />\n                            </Checkbox.Indicator>\n                          </Checkbox.Root>\n                        </label>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div className=\"mt-6 grid grid-cols-3 items-end justify-center\">\n                  <span className=\"font-primary-light text-2xs text-font-subtlest text-opacity-80\">\n                    Press <Kbd>Shift</Kbd> + <Kbd>S</Kbd> to accept\n                  </span>\n                  <div className=\"flex justify-center\">\n                    <Button\n                      color=\"primary\"\n                      type=\"submit\"\n                      name=\"_action\"\n                      value=\"upsert\"\n                      className=\"w-fit gap-2 px-8 py-2 font-primary-bold text-lg\"\n                      disabled={fetcher.state !== \"idle\"}\n                      aria-label=\"Accept changes\"\n                    >\n                      {fetcher.state !== \"idle\" ? (\n                        <>\n                          Submmiting\n                          <Spinner />\n                        </>\n                      ) : (\n                        \"Accept\"\n                      )}\n                    </Button>\n                  </div>\n                  <span className=\"justify-self-end font-primary-light text-2xs text-font-subtlest text-opacity-80\">\n                    Press <Kbd>Esc</Kbd> to close\n                  </span>\n                </div>\n              </Form>\n            </Dialog.Content>\n          </Dialog.Overlay>\n        </Dialog.Portal>\n      </Dialog.Root>\n      {/* To avoid hydration issues because a missmatch with the server*/}\n      <div\n        ref={setPortalContainer}\n        className=\"fixed left-0 top-0 z-50 h-full w-full\"\n      />\n    </>\n  );\n};\n\ninterface Props {\n  project?: Project;\n  users: User[];\n}\n\nconst Spinner = (): JSX.Element => (\n  <svg\n    aria-hidden=\"true\"\n    className=\"fill-grey-600 mr-2 inline-block h-5 w-5 animate-spin\"\n    viewBox=\"0 0 100 101\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path\n      d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\n      fill=\"currentBaseColor\"\n    />\n    <path\n      d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n", "export {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n} from './Checkbox';\nexport type { CheckboxProps, CheckboxIndicatorProps } from './Checkbox';\n", "import * as React from 'react';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useSize } from '@radix-ui/react-use-size';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_NAME = 'Checkbox';\n\ntype ScopedProps<P> = P & { __scopeCheckbox?: Scope };\nconst [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);\n\ntype CheckedState = boolean | 'indeterminate';\n\ntype CheckboxContextValue = {\n  state: CheckedState;\n  disabled?: boolean;\n};\n\nconst [CheckboxProvider, useCheckboxContext] =\n  createCheckboxContext<CheckboxContextValue>(CHECKBOX_NAME);\n\ntype CheckboxElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface CheckboxProps extends Omit<PrimitiveButtonProps, 'checked' | 'defaultChecked'> {\n  checked?: CheckedState;\n  defaultChecked?: CheckedState;\n  required?: boolean;\n  onCheckedChange?(checked: CheckedState): void;\n}\n\nconst Checkbox = React.forwardRef<CheckboxElement, CheckboxProps>(\n  (props: ScopedProps<CheckboxProps>, forwardedRef) => {\n    const {\n      __scopeCheckbox,\n      name,\n      checked: checkedProp,\n      defaultChecked,\n      required,\n      disabled,\n      value = 'on',\n      onCheckedChange,\n      ...checkboxProps\n    } = props;\n    const [button, setButton] = React.useState<HTMLButtonElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));\n    const hasConsumerStoppedPropagationRef = React.useRef(false);\n    // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = useControllableState({\n      prop: checkedProp,\n      defaultProp: defaultChecked,\n      onChange: onCheckedChange,\n    });\n    const initialCheckedStateRef = React.useRef(checked);\n    React.useEffect(() => {\n      const form = button?.form;\n      if (form) {\n        const reset = () => setChecked(initialCheckedStateRef.current);\n        form.addEventListener('reset', reset);\n        return () => form.removeEventListener('reset', reset);\n      }\n    }, [button, setChecked]);\n\n    return (\n      <CheckboxProvider scope={__scopeCheckbox} state={checked} disabled={disabled}>\n        <Primitive.button\n          type=\"button\"\n          role=\"checkbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          aria-required={required}\n          data-state={getState(checked)}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          value={value}\n          {...checkboxProps}\n          ref={composedRefs}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n          })}\n          onClick={composeEventHandlers(props.onClick, (event) => {\n            setChecked((prevChecked) => (isIndeterminate(prevChecked) ? true : !prevChecked));\n            if (isFormControl) {\n              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n              // if checkbox is in a form, stop propagation from the button so that we only propagate\n              // one click event (from the input). We propagate changes from an input so that native\n              // form validation works and form events reflect checkbox updates.\n              if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n          })}\n        />\n        {isFormControl && (\n          <BubbleInput\n            control={button}\n            bubbles={!hasConsumerStoppedPropagationRef.current}\n            name={name}\n            value={value}\n            checked={checked}\n            required={required}\n            disabled={disabled}\n            // We transform because the input is absolutely positioned but we have\n            // rendered it **after** the button. This pulls it back to sit on top\n            // of the button.\n            style={{ transform: 'translateX(-100%)' }}\n          />\n        )}\n      </CheckboxProvider>\n    );\n  }\n);\n\nCheckbox.displayName = CHECKBOX_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'CheckboxIndicator';\n\ntype CheckboxIndicatorElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface CheckboxIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst CheckboxIndicator = React.forwardRef<CheckboxIndicatorElement, CheckboxIndicatorProps>(\n  (props: ScopedProps<CheckboxIndicatorProps>, forwardedRef) => {\n    const { __scopeCheckbox, forceMount, ...indicatorProps } = props;\n    const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);\n    return (\n      <Presence present={forceMount || isIndeterminate(context.state) || context.state === true}>\n        <Primitive.span\n          data-state={getState(context.state)}\n          data-disabled={context.disabled ? '' : undefined}\n          {...indicatorProps}\n          ref={forwardedRef}\n          style={{ pointerEvents: 'none', ...props.style }}\n        />\n      </Presence>\n    );\n  }\n);\n\nCheckboxIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype InputProps = Radix.ComponentPropsWithoutRef<'input'>;\ninterface BubbleInputProps extends Omit<InputProps, 'checked'> {\n  checked: CheckedState;\n  control: HTMLElement | null;\n  bubbles: boolean;\n}\n\nconst BubbleInput = (props: BubbleInputProps) => {\n  const { control, checked, bubbles = true, ...inputProps } = props;\n  const ref = React.useRef<HTMLInputElement>(null);\n  const prevChecked = usePrevious(checked);\n  const controlSize = useSize(control);\n\n  // Bubble checked change to parents (e.g form change event)\n  React.useEffect(() => {\n    const input = ref.current!;\n    const inputProto = window.HTMLInputElement.prototype;\n    const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked') as PropertyDescriptor;\n    const setChecked = descriptor.set;\n\n    if (prevChecked !== checked && setChecked) {\n      const event = new Event('click', { bubbles });\n      input.indeterminate = isIndeterminate(checked);\n      setChecked.call(input, isIndeterminate(checked) ? false : checked);\n      input.dispatchEvent(event);\n    }\n  }, [prevChecked, checked, bubbles]);\n\n  return (\n    <input\n      type=\"checkbox\"\n      aria-hidden\n      defaultChecked={isIndeterminate(checked) ? false : checked}\n      {...inputProps}\n      tabIndex={-1}\n      ref={ref}\n      style={{\n        ...props.style,\n        ...controlSize,\n        position: 'absolute',\n        pointerEvents: 'none',\n        opacity: 0,\n        margin: 0,\n      }}\n    />\n  );\n};\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nconst Root = Checkbox;\nconst Indicator = CheckboxIndicator;\n\nexport {\n  createCheckboxScope,\n  //\n  Checkbox,\n  CheckboxIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { CheckboxProps, CheckboxIndicatorProps };\n", "import { Link } from \"@remix-run/react\";\nimport { IoCloseOutline } from \"react-icons/io5\";\nimport { IssueId } from \"@domain/issue\";\n\nexport const PanelHeaderProject = ({\n  id,\n}: PanelHeaderProjectProps): JSX.Element => {\n  // TODO: Add edit mode\n  return (\n    <div className=\"flex\">\n      <span className=\"flex flex-grow items-center\">\n        <span className=\"ml-1\">{id}</span>\n      </span>\n      <Link\n        to=\"/projects\"\n        className=\"ml-3 flex cursor-pointer rounded border-none p-0.5 text-icon hover:bg-background-accent-grey-subtlest\"\n      >\n        <IoCloseOutline size={32} />\n      </Link>\n    </div>\n  );\n};\n\ninterface PanelHeaderProjectProps {\n  id: IssueId;\n}\n"],
  "mappings": "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",
  "names": ["import_react", "CHECKBOX_NAME", "createCheckboxContext", "createCheckboxScope", "createContextScope", "CheckboxProvider", "useCheckboxContext", "Checkbox", "React", "props", "forwardedRef", "checked", "checkedProp", "checkboxProps", "button", "setButton", "composedRefs", "useComposedRefs", "node", "hasConsumerStoppedPropagationRef", "isFormControl", "Boolean", "closest", "setChecked", "useControllableState", "prop", "defaultProp", "defaultChecked", "onChange", "onCheckedChange", "initialCheckedStateRef", "form", "reset", "current", "addEventListener", "removeEventListener", "$1bpvS$createElement", "__scopeCheckbox", "isIndeterminate", "required", "getState", "disabled", "undefined", "composeEventHandlers", "onKeyDown", "event", "key", "preventDefault", "onClick", "prevChecked", "isPropagationStopped", "stopPropagation", "transform", "INDICATOR_NAME", "CheckboxIndicator", "React", "props", "forwardedRef", "indicatorProps", "context", "useCheckboxContext", "__scopeCheckbox", "$1bpvS$createElement", "forceMount", "isIndeterminate", "state", "getState", "disabled", "undefined", "pointerEvents", "style", "BubbleInput", "props", "inputProps", "ref", "React", "prevChecked", "usePrevious", "checked", "controlSize", "useSize", "control", "input", "current", "inputProto", "window", "HTMLInputElement", "prototype", "descriptor", "Object", "getOwnPropertyDescriptor", "setChecked", "set", "event", "Event", "indeterminate", "isIndeterminate", "call", "dispatchEvent", "bubbles", "$1bpvS$createElement", "style", "position", "pointerEvents", "opacity", "margin", "getState", "Root", "Checkbox", "Indicator", "CheckboxIndicator", "import_jsx_dev_runtime", "_a", "Title", "import_jsx_dev_runtime"]
}
