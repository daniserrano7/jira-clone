{
  "version": 3,
  "sources": ["../../../../../../../src/app/routes/__main/projects.$projectId/board/issue/$issueId.tsx"],
  "sourcesContent": ["import type {\n  ActionFunction,\n  LoaderFunction,\n  V2_MetaFunction,\n} from \"@remix-run/node\";\nimport { redirect, json } from \"@remix-run/node\";\nimport { useLoaderData, useLocation, useNavigate } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\nimport cx from \"classix\";\nimport * as Dialog from \"@radix-ui/react-dialog\";\nimport { UserId } from \"@domain/user\";\nimport { ProjectId } from \"@domain/project\";\nimport { CategoryId } from \"@domain/category\";\nimport { Issue, IssueId } from \"@domain/issue\";\nimport { Comment, CommentId } from \"@domain/comment\";\nimport { PriorityId } from \"@domain/priority\";\nimport { isValidSort } from \"@domain/filter\";\nimport {\n  getIssue,\n  updateIssue,\n  deleteIssue,\n  UpdateIssueInputData,\n} from \"@infrastructure/db/issue\";\nimport { deleteComment } from \"@infrastructure/db/comment\";\nimport { IssuePanel } from \"@app/ui/main/project/board/issue-panel\";\nimport { Error404 } from \"@app/components/error-404\";\nimport { textAreOnlySpaces } from \"@utils/text-are-only-spaces\";\nimport { emitter, EVENTS } from \"@app/events\";\nimport { formatTags, formatProperties } from \"@utils/meta\";\n\nexport const meta: V2_MetaFunction<typeof loader> = ({ data }) => {\n  const { issue, projectId } = data as LoaderData;\n  const title = `Jira clone - ${issue.name}`;\n  const description = issue.description || \"No description\";\n  const image =\n    \"https://jira-clone.fly.dev/static/images/readme/issue-panel.png\";\n  const url = `https://jira-clone.fly.dev/projects/${projectId}/board/issue/${issue.name}`;\n\n  const tags = {\n    charset: \"utf-8\",\n    viewport: \"width=device-width,initial-scale=1\",\n    title: title,\n    description: description,\n    \"twitter:card\": \"summary_large_image\",\n    \"twitter:site\": url,\n    \"twitter:domain\": \"jira-clone.fly.dev\",\n    \"twitter:title\": title,\n    \"twitter:description\": description,\n    \"twitter:image\": image,\n    \"twitter:image:width\": \"1452\",\n    \"twitter:image:height\": \"865\",\n    \"twitter:image:alt\": title,\n    \"twitter:creator\": \"@Jack_DanielSG\",\n    \"twitter:creator:id\": \"Jack_DanielSG\",\n  };\n\n  const properties = {\n    \"og:url\": url,\n    \"og:type\": \"website\",\n    \"og:site_name\": title,\n    \"og:title\": title,\n    \"og:description\": description,\n    \"og:image\": image,\n  };\n\n  return [...formatTags(tags), ...formatProperties(properties)];\n};\n\ntype LoaderData = {\n  issue: Issue;\n  projectId: ProjectId;\n};\n\nexport type ActionData = {\n  errors: {\n    name?: string;\n  };\n};\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const projectId = params.projectId as ProjectId;\n  const issueId = params.issueId as IssueId;\n\n  invariant(params.projectId, `params.projectId is required`);\n\n  const issue = await getIssue(issueId);\n\n  if (!issue) {\n    throw new Response(\"Not Found\", {\n      status: 404,\n    });\n  }\n\n  return json<LoaderData>({ issue, projectId });\n};\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const id = params.issueId as IssueId;\n  const projectId = params.projectId as ProjectId;\n  const formData = await request.formData();\n  const _action = formData.get(\"_action\") as string;\n  const url = new URL(request.url);\n  const sortByParam = url.searchParams.get(\"sortBy\") as string;\n  const sortBySeachParam = isValidSort(sortByParam)\n    ? `?sortBy=${sortByParam}`\n    : \"\";\n  const previousUrl = `/projects/${projectId}/board${sortBySeachParam}`;\n\n  if (_action === \"update\") {\n    const name = formData.get(\"title\") as string;\n    const description = formData.get(\"description\") as string;\n    const categoryId = formData.get(\"status\") as CategoryId;\n    const priority = formData.get(\"priority\") as PriorityId;\n    const asigneeId = formData.get(\"asignee\") as UserId;\n    const reporterId = formData.get(\"reporter\") as UserId;\n    const comments = JSON.parse(\n      formData.get(\"comments\") as string\n    ) as Comment[];\n    const issueInputData: UpdateIssueInputData = {\n      id,\n      name,\n      description,\n      categoryId,\n      priority,\n      asigneeId,\n      reporterId,\n      comments,\n    };\n\n    if (!name || textAreOnlySpaces(name)) {\n      return json<ActionData>(\n        { errors: { name: \"Title is required\" } },\n        { status: 400 }\n      );\n    }\n\n    await updateIssue(issueInputData);\n    emitter.emit(EVENTS.ISSUE_CHANGED, Date.now());\n  }\n\n  if (_action === \"delete\") {\n    console.log(\"DELETING ISSUE\");\n    await deleteIssue(id);\n    emitter.emit(EVENTS.ISSUE_DELETED, Date.now());\n  }\n\n  if (_action === \"deleteComment\") {\n    const commentId = formData.get(\"commentId\") as CommentId;\n\n    if (!commentId) return null;\n\n    await deleteComment(commentId);\n    return redirect(`/projects/${projectId}/board/issue/${id}`, 202);\n  }\n\n  return redirect(previousUrl);\n};\n\nexport function CatchBoundary() {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const boardUrl = location.pathname.split(\"/issue\")[0];\n\n  const handleProgrammaticNavigation = () => {\n    navigate(boardUrl);\n  };\n\n  return (\n    <Dialog.Root open={true}>\n      <Dialog.Portal>\n        <Dialog.Overlay\n          className={cx(\n            \"absolute left-0 top-0 z-50 box-border grid h-full w-full place-items-center overflow-y-auto bg-black bg-opacity-50 px-[40px] py-[40px]\",\n            \"radix-state-open:animate-fade-in duration-300\"\n          )}\n        >\n          <Dialog.Content\n            onPointerDownOutside={handleProgrammaticNavigation}\n            className={cx(\n              \"bg-background-surface relative z-50 flex rounded-md px-20 py-12 shadow-lg flex-center\",\n              \"duration-300 radix-state-open:animate-slide-up\"\n            )}\n          >\n            <Error404\n              message=\"This issue does not exist. Go to the board page\"\n              href={boardUrl}\n            />\n          </Dialog.Content>\n        </Dialog.Overlay>\n      </Dialog.Portal>\n    </Dialog.Root>\n  );\n}\n\nexport default function IssuePanelRoute() {\n  const { issue } = useLoaderData() as LoaderData;\n  return <IssuePanel issue={issue} />;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,kBAA+B;AAkLnB;AAzJL,IAAM,OAAuC,CAAC,EAAE,KAAK,MAAM;AAChE,QAAM,EAAE,OAAO,UAAU,IAAI;AAC7B,QAAM,QAAQ,gBAAgB,MAAM;AACpC,QAAM,cAAc,MAAM,eAAe;AACzC,QAAM,QACJ;AACF,QAAM,MAAM,uCAAuC,yBAAyB,MAAM;AAElF,QAAM,OAAO;AAAA,IACX,SAAS;AAAA,IACT,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,kBAAkB;AAAA,IAClB,iBAAiB;AAAA,IACjB,uBAAuB;AAAA,IACvB,iBAAiB;AAAA,IACjB,uBAAuB;AAAA,IACvB,wBAAwB;AAAA,IACxB,qBAAqB;AAAA,IACrB,mBAAmB;AAAA,IACnB,sBAAsB;AAAA,EACxB;AAEA,QAAM,aAAa;AAAA,IACjB,UAAU;AAAA,IACV,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,YAAY;AAAA,EACd;AAEA,SAAO,CAAC,GAAG,WAAW,IAAI,GAAG,GAAG,iBAAiB,UAAU,CAAC;AAC9D;AA4FO,SAAS,gBAAgB;AAC9B,QAAM,WAAW,YAAY;AAC7B,QAAM,WAAW,YAAY;AAC7B,QAAM,WAAW,SAAS,SAAS,MAAM,QAAQ,EAAE,CAAC;AAEpD,QAAM,+BAA+B,MAAM;AACzC,aAAS,QAAQ;AAAA,EACnB;AAEA,SACE,mDAAQ,2CAAP,EAAY,MAAM,MACjB,6DAAQ,2CAAP,EACC;AAAA,IAAQ;AAAA,IAAP;AAAA,MACC,WAAW;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA,MAEA;AAAA,QAAQ;AAAA,QAAP;AAAA,UACC,sBAAsB;AAAA,UACtB,WAAW;AAAA,YACT;AAAA,YACA;AAAA,UACF;AAAA,UAEA;AAAA,YAAC;AAAA;AAAA,cACC,SAAQ;AAAA,cACR,MAAM;AAAA;AAAA,YAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAGA;AAAA;AAAA,QAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA;AAAA;AAAA,IAjBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,KAnBF;AAAA;AAAA;AAAA;AAAA,SAoBA,KArBF;AAAA;AAAA;AAAA;AAAA,SAsBA;AAEJ;AAEe,SAAR,kBAAmC;AACxC,QAAM,EAAE,MAAM,IAAI,cAAc;AAChC,SAAO,mDAAC,cAAW,SAAZ;AAAA;AAAA;AAAA;AAAA,SAA0B;AACnC;",
  "names": []
}
