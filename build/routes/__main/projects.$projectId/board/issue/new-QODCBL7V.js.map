{
  "version": 3,
  "sources": ["../../../../../../../src/app/routes/__main/projects.$projectId/board/issue/new.tsx"],
  "sourcesContent": ["import type {\n  ActionFunction,\n  LoaderFunction,\n  V2_MetaFunction,\n} from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { UserId } from \"@domain/user\";\nimport { ProjectId } from \"@domain/project\";\nimport { CategoryId } from \"@domain/category\";\nimport { Comment } from \"@domain/comment\";\nimport { PriorityId } from \"@domain/priority\";\nimport { isValidSort } from \"@domain/filter\";\nimport { createIssue, CreateIssueInputData } from \"@infrastructure/db/issue\";\nimport { IssuePanel } from \"@app/ui/main/project/board/issue-panel\";\nimport { emitter, EVENTS } from \"@app/events\";\nimport { textAreOnlySpaces } from \"@utils/text-are-only-spaces\";\nimport { formatTags, formatProperties } from \"@utils/meta\";\n\nexport const meta: V2_MetaFunction<typeof loader> = ({ data }) => {\n  const { projectId } = data as LoaderData;\n  const title = `Jira clone - Create issue`;\n  const description = \"Create new issue, edit it and and assigne team members.\";\n  const image =\n    \"https://jira-clone.fly.dev/static/images/readme/issue-panel.png\";\n  const url = `https://jira-clone.fly.dev/projects/${projectId}/board/issue/new`;\n\n  const tags = {\n    charset: \"utf-8\",\n    viewport: \"width=device-width,initial-scale=1\",\n    title: title,\n    description: description,\n    \"twitter:card\": \"summary_large_image\",\n    \"twitter:site\": url,\n    \"twitter:domain\": \"jira-clone.fly.dev\",\n    \"twitter:title\": title,\n    \"twitter:description\": description,\n    \"twitter:image\": image,\n    \"twitter:image:width\": \"1452\",\n    \"twitter:image:height\": \"865\",\n    \"twitter:image:alt\": title,\n    \"twitter:creator\": \"@Jack_DanielSG\",\n    \"twitter:creator:id\": \"Jack_DanielSG\",\n  };\n\n  const properties = {\n    \"og:url\": url,\n    \"og:type\": \"website\",\n    \"og:site_name\": title,\n    \"og:title\": title,\n    \"og:description\": description,\n    \"og:image\": image,\n  };\n\n  return [...formatTags(tags), ...formatProperties(properties)];\n};\n\ntype LoaderData = {\n  projectId: ProjectId;\n};\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  const projectId = params.projectId as ProjectId;\n\n  invariant(params.projectId, `params.projectId is required`);\n  return json<LoaderData>({ projectId });\n};\n\nexport type ActionData = {\n  errors: {\n    name?: string;\n  };\n};\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const projectId = params.projectId as ProjectId;\n  const formData = await request.formData();\n  const _action = formData.get(\"_action\") as string;\n  const url = new URL(request.url);\n  const sortByParam = url.searchParams.get(\"sortBy\") as string;\n  const sortBySeachParam = isValidSort(sortByParam)\n    ? `?sortBy=${sortByParam}`\n    : \"\";\n  const previousUrl = `/projects/${projectId}/board${sortBySeachParam}`;\n\n  if (_action === \"create\") {\n    const name = formData.get(\"title\") as string;\n    const description = formData.get(\"description\") as string;\n    const categoryId = formData.get(\"status\") as CategoryId;\n    const priority = formData.get(\"priority\") as PriorityId;\n    const asigneeId = formData.get(\"asignee\") as UserId;\n    const reporterId = formData.get(\"reporter\") as UserId;\n    const comments = JSON.parse(\n      formData.get(\"comments\") as string\n    ) as Comment[];\n    const issueInputData: CreateIssueInputData = {\n      name,\n      description,\n      categoryId,\n      priority,\n      asigneeId,\n      reporterId,\n      comments,\n    };\n\n    if (!name || textAreOnlySpaces(name)) {\n      return json<ActionData>(\n        { errors: { name: \"Title is required\" } },\n        { status: 400 }\n      );\n    }\n\n    await createIssue(issueInputData);\n\n    emitter.emit(EVENTS.ISSUE_CREATED, Date.now());\n  }\n\n  return redirect(previousUrl);\n};\n\nexport default function IssuePanelRoute() {\n  return <IssuePanel />;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,kBAA+B;AAoHtB;AAtGF,IAAM,OAAuC,CAAC,EAAE,KAAK,MAAM;AAChE,QAAM,EAAE,UAAU,IAAI;AACtB,QAAM,QAAQ;AACd,QAAM,cAAc;AACpB,QAAM,QACJ;AACF,QAAM,MAAM,uCAAuC;AAEnD,QAAM,OAAO;AAAA,IACX,SAAS;AAAA,IACT,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,kBAAkB;AAAA,IAClB,iBAAiB;AAAA,IACjB,uBAAuB;AAAA,IACvB,iBAAiB;AAAA,IACjB,uBAAuB;AAAA,IACvB,wBAAwB;AAAA,IACxB,qBAAqB;AAAA,IACrB,mBAAmB;AAAA,IACnB,sBAAsB;AAAA,EACxB;AAEA,QAAM,aAAa;AAAA,IACjB,UAAU;AAAA,IACV,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,YAAY;AAAA,IACZ,kBAAkB;AAAA,IAClB,YAAY;AAAA,EACd;AAEA,SAAO,CAAC,GAAG,WAAW,IAAI,GAAG,GAAG,iBAAiB,UAAU,CAAC;AAC9D;AAiEe,SAAR,kBAAmC;AACxC,SAAO,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,SAAY;AACrB;",
  "names": []
}
