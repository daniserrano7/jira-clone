{
  "version": 3,
  "sources": ["../../../src/domain/comment/comment.mock.ts", "../../../src/domain/priority/priority.mock.ts", "../../../src/domain/issue/issue.mock.ts", "../../../node_modules/.pnpm/@radix-ui+react-alert-dialog@1.0.4_@types+react-dom@18.2.7_@types+react@18.2.15_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-alert-dialog/dist/packages/react/alert-dialog/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+react-alert-dialog@1.0.4_@types+react-dom@18.2.7_@types+react@18.2.15_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-alert-dialog/dist/packages/react/alert-dialog/src/AlertDialog.tsx", "../../../src/app/components/alert-dialog/alert-dialog.tsx"],
  "sourcesContent": ["import { userMock1, usersMock } from \"@domain/user\";\nimport { Comment } from \"./comment\";\n\nconst createdAt = Date.now();\nconst updatedAt = Date.now();\n\nexport const commentMock1: Comment = {\n  id: \"92149ee5-0459-4286-8323-1542e1295154\",\n  user: usersMock[3], // Jessie\n  message:\n    \"Depending on the user, some features are restricted. For example, only the reporter of an issue can edit the title and description.\",\n  createdAt,\n  updatedAt,\n};\n\nexport const commentMock2: Comment = {\n  id: \"3375b7ea-425d-4bd3-a728-c8888b63a7f2\",\n  user: usersMock[7], // Little Green Men\n  message: \"And only the original poster of a comment can edit or delete it!\",\n  createdAt,\n  updatedAt,\n};\n\nexport const commentMock3: Comment = {\n  id: \"ee000718-85e5-44ac-91e2-e29340fb0b61\",\n  user: usersMock[5], // Mr. Potato\n  message:\n    \"This is not they only accessible feature implemented. By using Radix UI, components like select, dialog or checkboxes are accessible by default, and you can handle them with the keyboard.\",\n  createdAt,\n  updatedAt,\n};\n\nexport const commentMock4: Comment = {\n  id: \"c0db6d6f-f395-4882-8bf4-e644f0e45460\",\n  user: userMock1, // Daniel Serrano\n  message:\n    \"By the way, the 404 error will be triggered if you modify the URL to any non existing path.\",\n  createdAt,\n  updatedAt,\n};\n\nexport const commentMock5: Comment = {\n  id: \"6c57eff9-f310-470a-b8e9-0f5234b63f5a\",\n  user: usersMock[6], // Ms. Potato\n  message:\n    \"By the way, the 404 error will be triggered if you modify the URL to any non existing path.\",\n  createdAt,\n  updatedAt,\n};\n", "import { Priority } from \"./priority\";\n\nexport const prioritiesMock: Priority[] = [\n  {\n    id: \"low\",\n    name: \"Low\",\n    order: 0,\n  },\n  {\n    id: \"medium\",\n    name: \"Medium\",\n    order: 1,\n  },\n  {\n    id: \"high\",\n    name: \"High\",\n    order: 2,\n  },\n];\n\nexport const priorityLow = prioritiesMock[0];\nexport const priorityMedium = prioritiesMock[1];\nexport const priorityHigh = prioritiesMock[2];\n", "import { userMock1, userMock2, usersMock } from \"@domain/user\";\nimport {\n  commentMock1,\n  commentMock2,\n  commentMock3,\n  commentMock4,\n  commentMock5,\n} from \"@domain/comment\";\nimport { priorityLow, priorityMedium, priorityHigh } from \"@domain/priority\";\nimport { Issue } from \"./issue\";\n\nconst createdAt = new Date(\"2022-01-18 11:00\").valueOf();\n\n// PROJECT 1\nexport const todoIssuesMock1: Issue[] = [];\n\nexport const inProgressIssuesMock1: Issue[] = [\n  {\n    id: \"ea07f7ca-13e9-4143-b623-f5713adef81a\",\n    name: \"HINT: Open two tabs to see events in real time.\",\n    description:\n      \"With the same project open in two different tabs, try making some changes on one of them. The result will be reflected instantly on the other. This will happen with every other user with the app open.\",\n    reporter: userMock1, // Daniel Serrano\n    asignee: userMock2, // Woody\n    comments: [],\n    priority: priorityHigh,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: createdAt,\n  },\n  {\n    id: \"23717058-379a-447a-a215-e425a124154f\",\n    name: \"HINT: Try to login and interact with different users. \",\n    description:\n      \"This will be reflected on the UI (e. g. which user created and issue or wrote a comment). A user can only see the projects they are assigned to. You can try this by creating a new project at the /projects page. To logout, go to the avatar dropdown (top right).\",\n    reporter: userMock2, // Woody\n    asignee: usersMock[2], // Buzz Lightyear\n    comments: [commentMock1, commentMock2],\n    priority: priorityHigh,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: new Date(\"2022-01-23 17:50\").valueOf(),\n  },\n];\n\nexport const doneIssuesMock1: Issue[] = [\n  {\n    id: \"cb3eb5e6-299d-4e1a-8521-a5541f8403e4\",\n    name: \"HINT: Check the URL when filter or navigate. Try navigate directly to the URL.\",\n    description:\n      \"All the routing is handled server-side thanks to Remix Run framework. Everytime you apply a filter, a new request is sent, the data is revalidated in the server and the page HTML is resent to the server. This is very useful when sharing a link. The other person will receive the same exact result as you.\",\n    reporter: userMock1,\n    asignee: userMock1,\n    comments: [],\n    priority: priorityLow,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: new Date(\"2022-01-23 10:51\").valueOf(),\n  },\n  {\n    id: \"8264e3fc-dd97-4abe-9612-deee6472e5c4\",\n    name: \"HINT: Try key combinations to execute actions. They are indicated on the UI.\",\n    description:\n      'E. g., try Shift + N on the board page to create a new issue. By default, it will be created under the category \"TO DO\". Another common key combination is using Shift + S to save changes (try it on this very issue!).',\n    reporter: userMock1,\n    asignee: userMock1,\n    comments: [commentMock3],\n    priority: priorityMedium,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: new Date(\"2022-01-23 02:04\").valueOf(),\n  },\n  {\n    id: \"4db55cbf-222d-424a-b23b-08e61534c706\",\n    name: \"HINT: Check network status when navigating to an error page.\",\n    description:\n      'There are two sections on the sidebar that will intentionally throw an error. The section \"Server error\" will trigger a 500 error response, while \"Not found\" returns a 404 error. You can check the status response on the browser network tab and see how it is handled on the UI.',\n    reporter: userMock1,\n    asignee: userMock1,\n    comments: [commentMock4, commentMock5],\n    priority: priorityMedium,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: new Date(\"2022-01-23 15:28\").valueOf(),\n  },\n];\n\n// PROJECT 2\nexport const todoIssuesMock2: Issue[] = [\n  {\n    id: \"f3efefcf-7859-4241-8b03-4ae815183355\",\n    name: \"Add and display issue timestamps\",\n    description:\n      \"Id should be create automatically on new Issue(). It must be displayed on issue panel, as well as an updatedAt parameter\",\n    reporter: userMock1,\n    asignee: userMock2,\n    comments: [],\n    priority: priorityMedium,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: new Date(\"2022-01-18 11:01\").valueOf(),\n  },\n  {\n    id: \"6bf6a1f4-20bb-492b-8ea4-4aa18efeb062\",\n    name: \"Add projects section and the ability to create multiple projects\",\n    description:\n      \"Router would be needed. Can create and edit project, as well as add users to that particular project\",\n    reporter: userMock1,\n    asignee: userMock1,\n    comments: [],\n    priority: priorityLow,\n    categoryType: \"TODO\",\n    createdAt,\n    updatedAt: new Date(\"2022-01-23 14:28\").valueOf(),\n  },\n];\n\nexport const inProgressIssuesMock2: Issue[] = [\n  {\n    id: \"812664aa-82be-418b-9ba3-1d7acdcd6be2\",\n    name: \"Add dark mode\",\n    description: \"\",\n    reporter: userMock1,\n    asignee: userMock1,\n    comments: [],\n    priority: priorityHigh,\n    categoryType: \"IN_PROGRESS\",\n    createdAt,\n    updatedAt: createdAt,\n  },\n];\n\nexport const doneIssuesMock2: Issue[] = [];\n\nexport const defaultIssuesIds = [\n  todoIssuesMock1,\n  inProgressIssuesMock1,\n  doneIssuesMock1,\n  todoIssuesMock2,\n  inProgressIssuesMock2,\n  doneIssuesMock2,\n]\n  .flat()\n  .map((issue) => issue.id);\n", "export {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n} from './AlertDialog';\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n} from './AlertDialog';\n", "import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { createDialogScope } from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Slottable } from '@radix-ui/react-slot';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\ntype ScopedProps<P> = P & { __scopeAlertDialog?: Scope };\nconst [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [\n  createDialogScope,\n]);\nconst useDialogScope = createDialogScope();\n\ntype DialogProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\ninterface AlertDialogProps extends Omit<DialogProps, 'modal'> {}\n\nconst AlertDialog: React.FC<AlertDialogProps> = (props: ScopedProps<AlertDialogProps>) => {\n  const { __scopeAlertDialog, ...alertDialogProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Root {...dialogScope} {...alertDialogProps} modal={true} />;\n};\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTrigger\n * -----------------------------------------------------------------------------------------------*/\nconst TRIGGER_NAME = 'AlertDialogTrigger';\n\ntype AlertDialogTriggerElement = React.ElementRef<typeof DialogPrimitive.Trigger>;\ntype DialogTriggerProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>;\ninterface AlertDialogTriggerProps extends DialogTriggerProps {}\n\nconst AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(\n  (props: ScopedProps<AlertDialogTriggerProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...triggerProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Trigger {...dialogScope} {...triggerProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'AlertDialogPortal';\n\ntype DialogPortalProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>;\ninterface AlertDialogPortalProps extends DialogPortalProps {}\n\nconst AlertDialogPortal: React.FC<AlertDialogPortalProps> = (\n  props: ScopedProps<AlertDialogPortalProps>\n) => {\n  const { __scopeAlertDialog, ...portalProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Portal {...dialogScope} {...portalProps} />;\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'AlertDialogOverlay';\n\ntype AlertDialogOverlayElement = React.ElementRef<typeof DialogPrimitive.Overlay>;\ntype DialogOverlayProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>;\ninterface AlertDialogOverlayProps extends DialogOverlayProps {}\n\nconst AlertDialogOverlay = React.forwardRef<AlertDialogOverlayElement, AlertDialogOverlayProps>(\n  (props: ScopedProps<AlertDialogOverlayProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...overlayProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Overlay {...dialogScope} {...overlayProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<AlertDialogCancelElement | null>;\n};\n\nconst [AlertDialogContentProvider, useAlertDialogContentContext] =\n  createAlertDialogContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentElement = React.ElementRef<typeof DialogPrimitive.Content>;\ntype DialogContentProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\ninterface AlertDialogContentProps\n  extends Omit<DialogContentProps, 'onPointerDownOutside' | 'onInteractOutside'> {}\n\nconst AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(\n  (props: ScopedProps<AlertDialogContentProps>, forwardedRef) => {\n    const { __scopeAlertDialog, children, ...contentProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const contentRef = React.useRef<AlertDialogContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const cancelRef = React.useRef<AlertDialogCancelElement | null>(null);\n\n    return (\n      <DialogPrimitive.WarningProvider\n        contentName={CONTENT_NAME}\n        titleName={TITLE_NAME}\n        docsSlug=\"alert-dialog\"\n      >\n        <AlertDialogContentProvider scope={__scopeAlertDialog} cancelRef={cancelRef}>\n          <DialogPrimitive.Content\n            role=\"alertdialog\"\n            {...dialogScope}\n            {...contentProps}\n            ref={composedRefs}\n            onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n              event.preventDefault();\n              cancelRef.current?.focus({ preventScroll: true });\n            })}\n            onPointerDownOutside={(event) => event.preventDefault()}\n            onInteractOutside={(event) => event.preventDefault()}\n          >\n            {/**\n             * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n             * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n             * This is because we want the accessibility checks to run only once the content is actually\n             * open and that behaviour is already encapsulated in `DialogContent`.\n             */}\n            <Slottable>{children}</Slottable>\n            {process.env.NODE_ENV === 'development' && (\n              <DescriptionWarning contentRef={contentRef} />\n            )}\n          </DialogPrimitive.Content>\n        </AlertDialogContentProvider>\n      </DialogPrimitive.WarningProvider>\n    );\n  }\n);\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'AlertDialogTitle';\n\ntype AlertDialogTitleElement = React.ElementRef<typeof DialogPrimitive.Title>;\ntype DialogTitleProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\ninterface AlertDialogTitleProps extends DialogTitleProps {}\n\nconst AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(\n  (props: ScopedProps<AlertDialogTitleProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...titleProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Title {...dialogScope} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\n\ntype AlertDialogDescriptionElement = React.ElementRef<typeof DialogPrimitive.Description>;\ntype DialogDescriptionProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\ninterface AlertDialogDescriptionProps extends DialogDescriptionProps {}\n\nconst AlertDialogDescription = React.forwardRef<\n  AlertDialogDescriptionElement,\n  AlertDialogDescriptionProps\n>((props: ScopedProps<AlertDialogDescriptionProps>, forwardedRef) => {\n  const { __scopeAlertDialog, ...descriptionProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Description {...dialogScope} {...descriptionProps} ref={forwardedRef} />;\n});\n\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'AlertDialogAction';\n\ntype AlertDialogActionElement = React.ElementRef<typeof DialogPrimitive.Close>;\ntype DialogCloseProps = Radix.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogActionProps extends DialogCloseProps {}\n\nconst AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(\n  (props: ScopedProps<AlertDialogActionProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...actionProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Close {...dialogScope} {...actionProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelElement = React.ElementRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogCancelProps extends DialogCloseProps {}\n\nconst AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(\n  (props: ScopedProps<AlertDialogCancelProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...cancelProps } = props;\n    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const ref = useComposedRefs(forwardedRef, cancelRef);\n    return <DialogPrimitive.Close {...dialogScope} {...cancelProps} ref={ref} />;\n  }\n);\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<AlertDialogContentElement>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Portal = AlertDialogPortal;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n};\n", "import * as AlertDialog from \"@radix-ui/react-alert-dialog\";\nimport { twix } from \"tailwindcss-radix-ui\";\nimport { Button, Props as ButtonProps } from \"../button\";\n\nexport const Root = AlertDialog.Root;\nexport const Trigger = AlertDialog.Trigger;\nexport const Portal = AlertDialog.Portal;\nexport const Overlay = twix(\n  AlertDialog.Overlay,\n  \"fixed top-0 left-0 z-50 h-full w-full backdrop-blur-sm\"\n);\nexport const Content = twix(\n  AlertDialog.Content,\n  \"fixed top-1/2 text-font left-1/2 z-50 -translate-x-1/2 -translate-y-1/2 rounded bg-elevation-surface-overlay p-5 shadow-lg\"\n);\nexport const Title = twix(\n  AlertDialog.Title,\n  \"mb-5 font-primary-black text-3xl\"\n);\nexport const Description = twix(\n  AlertDialog.Description,\n  \"mt-8 flex w-full justify-end gap-4\"\n);\nexport const Cancel = ({ children, ...rest }: ButtonProps): JSX.Element => (\n  <AlertDialog.Cancel asChild>\n    <Button {...rest} color=\"neutral\" variant=\"subtlest\">\n      Cancel\n    </Button>\n  </AlertDialog.Cancel>\n);\nexport const Action = ({ children, ...rest }: ButtonProps): JSX.Element => (\n  <Button {...rest} color=\"danger\">\n    {children}\n  </Button>\n);\n"],
  "mappings": "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",
  "names": ["createdAt", "ROOT_NAME", "createAlertDialogContext", "createAlertDialogScope", "createContextScope", "createDialogScope", "useDialogScope", "AlertDialog", "props", "alertDialogProps", "dialogScope", "__scopeAlertDialog", "$4k4D0$createElement", "AlertDialogTrigger", "React", "props", "forwardedRef", "triggerProps", "dialogScope", "useDialogScope", "__scopeAlertDialog", "$4k4D0$createElement", "AlertDialogPortal", "props", "portalProps", "dialogScope", "useDialogScope", "__scopeAlertDialog", "$4k4D0$createElement", "AlertDialogOverlay", "React", "props", "forwardedRef", "overlayProps", "dialogScope", "useDialogScope", "__scopeAlertDialog", "$4k4D0$createElement", "CONTENT_NAME", "AlertDialogContentProvider", "useAlertDialogContentContext", "createAlertDialogContext", "AlertDialogContent", "React", "props", "forwardedRef", "contentProps", "dialogScope", "useDialogScope", "__scopeAlertDialog", "contentRef", "composedRefs", "useComposedRefs", "cancelRef", "$4k4D0$createElement", "TITLE_NAME", "composeEventHandlers", "onOpenAutoFocus", "event", "preventDefault", "current", "focus", "preventScroll", "children", "process", "TITLE_NAME", "AlertDialogTitle", "React", "props", "forwardedRef", "titleProps", "dialogScope", "useDialogScope", "__scopeAlertDialog", "$4k4D0$createElement", "AlertDialogDescription", "React", "props", "forwardedRef", "descriptionProps", "dialogScope", "useDialogScope", "__scopeAlertDialog", "$4k4D0$createElement", "CANCEL_NAME", "AlertDialogCancel", "React", "props", "forwardedRef", "cancelProps", "cancelRef", "useAlertDialogContentContext", "__scopeAlertDialog", "dialogScope", "useDialogScope", "ref", "useComposedRefs", "$4k4D0$createElement", "Root", "AlertDialog", "Trigger", "AlertDialogTrigger", "Portal", "AlertDialogPortal", "Overlay", "AlertDialogOverlay", "Content", "AlertDialogContent", "Cancel", "AlertDialogCancel", "Title", "AlertDialogTitle", "Description", "AlertDialogDescription"]
}
