{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@radix-ui+react-avatar@1.0.3_@types+react-dom@18.2.7_@types+react@18.2.15_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-avatar/dist/packages/react/avatar/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+react-avatar@1.0.3_@types+react-dom@18.2.7_@types+react@18.2.15_react-dom@18.2.0_react@18.2.0/node_modules/@radix-ui/react-avatar/dist/packages/react/avatar/src/Avatar.tsx", "../../../src/app/components/tooltip/tooltip.tsx", "../../../src/app/components/user-avatar/user-avatar.tsx", "../../../node_modules/.pnpm/@radix-ui+react-use-size@1.0.1_@types+react@18.2.15_react@18.2.0/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/index.ts", "../../../node_modules/.pnpm/@radix-ui+react-use-size@1.0.1_@types+react@18.2.15_react@18.2.0/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],
  "sourcesContent": ["export {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n} from './Avatar';\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps } from './Avatar';\n", "import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Avatar\n * -----------------------------------------------------------------------------------------------*/\n\nconst AVATAR_NAME = 'Avatar';\n\ntype ScopedProps<P> = P & { __scopeAvatar?: Scope };\nconst [createAvatarContext, createAvatarScope] = createContextScope(AVATAR_NAME);\n\ntype ImageLoadingStatus = 'idle' | 'loading' | 'loaded' | 'error';\n\ntype AvatarContextValue = {\n  imageLoadingStatus: ImageLoadingStatus;\n  onImageLoadingStatusChange(status: ImageLoadingStatus): void;\n};\n\nconst [AvatarProvider, useAvatarContext] = createAvatarContext<AvatarContextValue>(AVATAR_NAME);\n\ntype AvatarElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface AvatarProps extends PrimitiveSpanProps {}\n\nconst Avatar = React.forwardRef<AvatarElement, AvatarProps>(\n  (props: ScopedProps<AvatarProps>, forwardedRef) => {\n    const { __scopeAvatar, ...avatarProps } = props;\n    const [imageLoadingStatus, setImageLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n    return (\n      <AvatarProvider\n        scope={__scopeAvatar}\n        imageLoadingStatus={imageLoadingStatus}\n        onImageLoadingStatusChange={setImageLoadingStatus}\n      >\n        <Primitive.span {...avatarProps} ref={forwardedRef} />\n      </AvatarProvider>\n    );\n  }\n);\n\nAvatar.displayName = AVATAR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarImage\n * -----------------------------------------------------------------------------------------------*/\n\nconst IMAGE_NAME = 'AvatarImage';\n\ntype AvatarImageElement = React.ElementRef<typeof Primitive.img>;\ntype PrimitiveImageProps = Radix.ComponentPropsWithoutRef<typeof Primitive.img>;\ninterface AvatarImageProps extends PrimitiveImageProps {\n  onLoadingStatusChange?: (status: ImageLoadingStatus) => void;\n}\n\nconst AvatarImage = React.forwardRef<AvatarImageElement, AvatarImageProps>(\n  (props: ScopedProps<AvatarImageProps>, forwardedRef) => {\n    const { __scopeAvatar, src, onLoadingStatusChange = () => {}, ...imageProps } = props;\n    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);\n    const imageLoadingStatus = useImageLoadingStatus(src);\n    const handleLoadingStatusChange = useCallbackRef((status: ImageLoadingStatus) => {\n      onLoadingStatusChange(status);\n      context.onImageLoadingStatusChange(status);\n    });\n\n    useLayoutEffect(() => {\n      if (imageLoadingStatus !== 'idle') {\n        handleLoadingStatusChange(imageLoadingStatus);\n      }\n    }, [imageLoadingStatus, handleLoadingStatusChange]);\n\n    return imageLoadingStatus === 'loaded' ? (\n      <Primitive.img {...imageProps} ref={forwardedRef} src={src} />\n    ) : null;\n  }\n);\n\nAvatarImage.displayName = IMAGE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AvatarFallback\n * -----------------------------------------------------------------------------------------------*/\n\nconst FALLBACK_NAME = 'AvatarFallback';\n\ntype AvatarFallbackElement = React.ElementRef<typeof Primitive.span>;\ninterface AvatarFallbackProps extends PrimitiveSpanProps {\n  delayMs?: number;\n}\n\nconst AvatarFallback = React.forwardRef<AvatarFallbackElement, AvatarFallbackProps>(\n  (props: ScopedProps<AvatarFallbackProps>, forwardedRef) => {\n    const { __scopeAvatar, delayMs, ...fallbackProps } = props;\n    const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);\n    const [canRender, setCanRender] = React.useState(delayMs === undefined);\n\n    React.useEffect(() => {\n      if (delayMs !== undefined) {\n        const timerId = window.setTimeout(() => setCanRender(true), delayMs);\n        return () => window.clearTimeout(timerId);\n      }\n    }, [delayMs]);\n\n    return canRender && context.imageLoadingStatus !== 'loaded' ? (\n      <Primitive.span {...fallbackProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nAvatarFallback.displayName = FALLBACK_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction useImageLoadingStatus(src?: string) {\n  const [loadingStatus, setLoadingStatus] = React.useState<ImageLoadingStatus>('idle');\n\n  React.useEffect(() => {\n    if (!src) {\n      setLoadingStatus('error');\n      return;\n    }\n\n    let isMounted = true;\n    const image = new window.Image();\n\n    const updateStatus = (status: ImageLoadingStatus) => () => {\n      if (!isMounted) return;\n      setLoadingStatus(status);\n    };\n\n    setLoadingStatus('loading');\n    image.onload = updateStatus('loaded');\n    image.onerror = updateStatus('error');\n    image.src = src;\n\n    return () => {\n      isMounted = false;\n    };\n  }, [src]);\n\n  return loadingStatus;\n}\nconst Root = Avatar;\nconst Image = AvatarImage;\nconst Fallback = AvatarFallback;\n\nexport {\n  createAvatarScope,\n  //\n  Avatar,\n  AvatarImage,\n  AvatarFallback,\n  //\n  Root,\n  Image,\n  Fallback,\n};\nexport type { AvatarProps, AvatarImageProps, AvatarFallbackProps };\n", "import { useState } from \"react\";\nimport cx from \"classix\";\n\nexport const Tooltip = ({\n  title,\n  show = true,\n  children,\n}: TooltipProps): JSX.Element => {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const showTooltip = () => setIsVisible(true);\n  const hideTooltip = () => setIsVisible(false);\n\n  if (!show) return children;\n\n  return (\n    // Don't know why h-fit (and other h-*) doesn't work here\n    <div className=\"relative w-fit\" style={{ height: \"fit-content\" }}>\n      <div onMouseEnter={showTooltip} onMouseLeave={hideTooltip}>\n        {children}\n      </div>\n      <div\n        className={cx(\n          \"z-80 absolute left-1/2 top-full mt-1.5 -translate-x-1/2 transform justify-center break-words\",\n          isVisible ? \"flex\" : \"hidden\"\n        )}\n      >\n        <div className=\"w-fit whitespace-nowrap rounded bg-font px-1.5 py-0.5 text-2xs text-font-inverse\">\n          {title}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ninterface TooltipProps {\n  title: string;\n  show?: boolean;\n  children: JSX.Element;\n}\n", "import * as Avatar from \"@radix-ui/react-avatar\";\nimport { User } from \"@domain/user\";\nimport { Tooltip } from \"@app/components/tooltip\";\n\nexport const UserAvatar = ({\n  name,\n  image,\n  color,\n  size = 36,\n  tooltip = false,\n}: UserAvatarProps): JSX.Element => {\n  const imageMinName = image?.replace(\".webp\", \"-min.webp\");\n  const imageSrc = size > 80 ? `/avatars/${image}` : `/avatars/${imageMinName}`;\n  const imageSize = {\n    width: `${size}px`,\n    minWidth: `${size}px`,\n    height: `${size}px`,\n  };\n  const acronym = name\n    .split(\" \")\n    .slice(0, 2)\n    .map((word) => word[0].toUpperCase())\n    .join(\"\");\n\n  return (\n    <Tooltip title={name} show={tooltip}>\n      <Avatar.Root className=\"flex items-center rounded-full\" style={imageSize}>\n        <Avatar.Image\n          className=\"rounded-full object-cover\"\n          src={image && imageSrc}\n          style={imageSize}\n          alt={name}\n        />\n        <Avatar.Fallback\n          delayMs={0}\n          className=\"flex items-center justify-center rounded-full text-[var(--Neutral1000)]\"\n          style={{\n            ...imageSize,\n            backgroundColor: color,\n            fontSize: `${size / 2}px`,\n          }}\n        >\n          {acronym}\n        </Avatar.Fallback>\n      </Avatar.Root>\n    </Tooltip>\n  );\n};\n\ninterface UserAvatarProps extends Omit<User, \"id\"> {\n  size?: number;\n  tooltip?: boolean;\n}\n", "export { useSize } from './useSize';\n", "/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nfunction useSize(element: HTMLElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  useLayoutEffect(() => {\n    if (element) {\n      // provide size as early as possible\n      setSize({ width: element.offsetWidth, height: element.offsetHeight });\n\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate it ourselves to get the correct border box.\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => resizeObserver.unobserve(element);\n    } else {\n      // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n    }\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"],
  "mappings": "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",
  "names": ["AVATAR_NAME", "createAvatarContext", "createAvatarScope", "createContextScope", "AvatarProvider", "useAvatarContext", "Avatar", "React", "props", "forwardedRef", "avatarProps", "imageLoadingStatus", "setImageLoadingStatus", "$8NyvN$createElement", "__scopeAvatar", "IMAGE_NAME", "AvatarImage", "React", "props", "forwardedRef", "imageProps", "context", "useAvatarContext", "__scopeAvatar", "imageLoadingStatus", "useImageLoadingStatus", "src", "handleLoadingStatusChange", "useCallbackRef", "status", "onLoadingStatusChange", "onImageLoadingStatusChange", "useLayoutEffect", "$8NyvN$createElement", "FALLBACK_NAME", "AvatarFallback", "React", "props", "forwardedRef", "fallbackProps", "context", "useAvatarContext", "__scopeAvatar", "canRender", "setCanRender", "delayMs", "undefined", "timerId", "window", "setTimeout", "clearTimeout", "imageLoadingStatus", "$8NyvN$createElement", "useImageLoadingStatus", "src", "loadingStatus", "setLoadingStatus", "React", "isMounted", "image", "window", "Image", "updateStatus", "status", "onload", "onerror", "Root", "Avatar", "AvatarImage", "Fallback", "AvatarFallback", "import_react", "import_jsx_dev_runtime", "useSize", "element", "size", "setSize", "React", "undefined", "useLayoutEffect", "width", "offsetWidth", "height", "offsetHeight", "resizeObserver", "ResizeObserver", "entries", "Array", "isArray", "length", "entry", "borderSizeEntry", "borderSize", "observe", "box", "unobserve"]
}
